<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AdaptiveExpressions</name>
    </assembly>
    <members>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Accessor">
            <summary>
            Used to access the variable value corresponding to the path.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Accessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Accessor"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Add">
            <summary>
            Return the result from adding two or more numbers (pure number case) or concatting two or more strings (other case).
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Add.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Add"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.AddDays">
            <summary>
            Add a number of days to a timestamp.
            AddDays function takes a timestamp string, an interval integer,
            an optional format string whose default value "yyyy-MM-ddTHH:mm:ss.fffZ"
            and an optional locale string whose default value is Thread.CurrentThread.CurrentCulture.Name.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.AddDays.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.AddDays"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.AddHours">
            <summary>
            Add a number of hours to a timestamp.
            AddHours function takes a timestamp string, an interval integer,
            an optional format string whose default value "yyyy-MM-ddTHH:mm:ss.fffZ"
            and an optional locale string whose default value is Thread.CurrentThread.CurrentCulture.Name.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.AddHours.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.AddHours"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.AddMinutes">
            <summary>
            Add a number of minutes to a timestamp.
            AddMinutes function takes a timestamp string, an interval integer,
            an optional format string whose default value "yyyy-MM-ddTHH:mm:ss.fffZ"
            and an optional locale string whose default value is Thread.CurrentThread.CurrentCulture.Name.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.AddMinutes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.AddMinutes"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.AddOrdinal">
            <summary>
            Return the ordinal number of the input number.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.AddOrdinal.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.AddOrdinal"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.AddProperty">
            <summary>
            Add a property and its value, or name-value pair, to a JSON object, and return the updated object.
            If the object already exists at runtime the function throws an error.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.AddProperty.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.AddProperty"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.AddSeconds">
            <summary>
            Add a number of seconds to a timestamp.
            AddSeconds function takes a timestamp string, an interval integer,
            an optional format string whose default value "yyyy-MM-ddTHH:mm:ss.fffZ"
            and an optional locale string whose default value is Thread.CurrentThread.CurrentCulture.Name.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.AddSeconds.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.AddSeconds"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.AddToTime">
            <summary>
            Add a number of time units to a timestamp. 
            AddToTime function takes a timestamp string, an interval integer, a unit of time string,
            an optional format string whose default value "yyyy-MM-ddTHH:mm:ss.fffZ"
            and an optional locale string whose default value is Thread.CurrentThread.CurrentCulture.Name.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.AddToTime.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.AddToTime"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.And">
            <summary>
            Check whether all expressions are true. Return true if all expressions are true,
            or return false if at least one expression is false.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.And.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.And"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Average">
            <summary>
            Return the number average of a numeric array.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Average.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Average"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Base64">
            <summary>
            Return the base64-encoded version of a string or byte array.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Base64.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Base64"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Base64ToBinary">
            <summary>
            Return the binary array of a base64-encoded string.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Base64ToBinary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Base64ToBinary"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Base64ToString">
            <summary>
            Return the string version of a base64-encoded string,
            effectively decoding the base64 string.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Base64ToString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Base64ToString"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Binary">
            <summary>
            Return the binary version of a string.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Binary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Binary"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Bool">
            <summary>
            Return the Boolean version of a value.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Bool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Bool"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Ceiling">
            <summary>
            Returns the smallest integral value that is greater than or equal to the specified number.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Ceiling.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Ceiling"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Coalesce">
            <summary>
            Return the first non-null value from one or more parameters.
            Empty strings, empty arrays, and empty objects are not null.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Coalesce.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Coalesce"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.ComparisonEvaluator">
            <summary>
            Comparison operators.
            A comparison operator returns false if the comparison is false, or there is an error.  This prevents errors from short-circuiting boolean expressions.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.ComparisonEvaluator.#ctor(System.String,System.Func{System.Collections.Generic.IReadOnlyList{System.Object},System.Boolean},AdaptiveExpressions.ValidateExpressionDelegate,AdaptiveExpressions.FunctionUtils.VerifyExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.ComparisonEvaluator"/> class.
            </summary>
            <param name="type">Name of the built-in function.</param>
            <param name="function">The comparison function, it takes a list of objects and returns a boolean.</param>
            <param name="validator">Validator of input arguments.</param>
            <param name="verify">Optional function to verify each child's result.</param>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Concat">
            <summary>
            Combine two or more strings, and return the combined string.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Concat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Concat"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Contains">
            <summary>
            Check whether a collection has a specific item. Return true if the item is found,
            or return false if not found.
            This function is case-sensitive.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Contains.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Contains"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.ConvertFromUtc">
            <summary>
            Convert a timestamp from Universal Time Coordinated (UTC) to a target time zone.
            ConvertFromUtc takes a timestamp string, a timezone string,
            an optional format string whose default value "yyyy-MM-ddTHH:mm:ss.fffZ"
            and an optional locale string whose default value is Thread.CurrentThread.CurrentCulture.Name.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.ConvertFromUtc.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.ConvertFromUtc"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.ConvertToUtc">
            <summary>
            Convert a timestamp to Universal Time Coordinated (UTC) from the source time zone.
            ConvertToUtc function takes a timestamp string, a timezone string,
            an optional format string whose default value "yyyy-MM-ddTHH:mm:ss.fffZ"
            and an optional locale string whose default value is Thread.CurrentThread.CurrentCulture.Name.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.ConvertToUtc.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.ConvertToUtc"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Count">
            <summary>
            Return the number of items in a collection.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Count.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Count"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.CountWord">
            <summary>
            Return the number of words in a string.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.CountWord.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.CountWord"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.CreateArray">
            <summary>
            Return an array from multiple inputs.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.CreateArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.CreateArray"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.DataUri">
            <summary>
            Return a data uniform resource identifier (URI) of a string.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.DataUri.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.DataUri"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.DataUriToBinary">
            <summary>
            Return the binary version of a data uniform resource identifier (URI).
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.DataUriToBinary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.DataUriToBinary"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.DataUriToString">
            <summary>
            Return the string version of a data uniform resource identifier (URI).
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.DataUriToString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.DataUriToString"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Date">
            <summary>
            Return the date of a specified timestamp in m/dd/yyyy format.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Date.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Date"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.DateReadBack">
            <summary>
            Uses the date-time library to provide a date readback.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.DateReadBack.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.DateReadBack"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.DateTimeDiff">
            <summary>
            Return a number of ticks that the two timestamp differs.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.DateTimeDiff.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.DateTimeDiff"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.DayOfMonth">
            <summary>
            Return the day of the month from a timestamp.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.DayOfMonth.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.DayOfMonth"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.DayOfWeek">
            <summary>
            Return the day of the week from a timestamp.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.DayOfWeek.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.DayOfWeek"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.DayOfYear">
            <summary>
            Return the day of the year from a timestamp.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.DayOfYear.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.DayOfYear"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Divide">
            <summary>
            Return the integer result from dividing two numbers. 
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Divide.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Divide"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Element">
            <summary>
            The indexing operator ([ ]) selects a single element from a sequence.
            Support number index for list or string index for object.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Element.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Element"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Empty">
            <summary>
            Check whether an instance is empty. Return true if the input is empty. Empty means:
            1.input is null or undefined
            2.input is a null or empty string
            3.input is zero size collection
            4.input is an object with no property.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Empty.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Empty"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.EndsWith">
            <summary>
            Check whether a string ends with a specific substring. Return true if the substring is found,
            or return false if not found.
            This function is case-insensitive.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.EndsWith.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.EndsWith"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.EOL">
            <summary>
            End of line. Return \r\n in windows, and \n in unix.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.EOL.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.EOL"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Equal">
            <summary>
            Check whether both values, expressions, or objects are equivalent.
            Return true if both are equivalent, or return false if they're not equivalent.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Equal.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Equal"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Exists">
            <summary>
            Evaluates an expression for truthiness.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Exists.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Exists"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.First">
            <summary>
            Return the first item from a string or array.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.First.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.First"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Flatten">
            <summary>
            Flatten an array into non-array values. You can optionally set the maximum depth to flatten to.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Flatten.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Flatten"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Float">
            <summary>
            Convert the string version of a floating-point number to a floating-point number. You can use this function only when passing custom parameters to an app, such as a logic app.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Float.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Float"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Floor">
            <summary>
            Returns the largest integer less than or equal to the specified number.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Floor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Floor"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Foreach">
            <summary>
            Operate on each element and return the new collection.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Foreach.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Foreach"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.FormatDateTime">
            <summary>
            Return a timestamp in the specified format.
            FormatDateTime function takes a timestamp string,
            an optional format string whose default value "yyyy-MM-ddTHH:mm:ss.fffZ"
            and an optional locale string whose default value is Thread.CurrentThread.CurrentCulture.Name.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.FormatDateTime.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.FormatDateTime"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.FormatEpoch">
            <summary>
            Return a timestamp in the specified format from UNIX time (also know as Epoch time, POSIX time, UNIX Epoch time).
            FormatEpoch function takes an epoch long integer,
            an optional format string whose default value "yyyy-MM-ddTHH:mm:ss.fffZ"
            and an optional locale string whose default value is Thread.CurrentThread.CurrentCulture.Name.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.FormatEpoch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.FormatEpoch"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.FormatNumber">
            <summary>
            Format number into required decimal numbers.
            FormatNumber function takes a number as the first argument, a precision digits integer
            and an optional locale string whose default value is Thread.CurrentThread.CurrentCulture.Name..
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.FormatNumber.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.FormatNumber"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.FormatTicks">
            <summary>
            Return a timestamp in the specified format from ticks.
            FormatTicks function takes a ticks long integer,
            an optional format string whose default value "yyyy-MM-ddTHH:mm:ss.fffZ"
            and an optional locale string whose default value is Thread.CurrentThread.CurrentCulture.Name.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.FormatTicks.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.FormatTicks"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.GetFutureTime">
            <summary>
            Return the current timestamp plus the specified time units.
            GetFutureTime function takes an interval integer, a unit of time string,
            an optional format string whose default value "yyyy-MM-ddTHH:mm:ss.fffZ"
            and an optional locale string whose default value is Thread.CurrentThread.CurrentCulture.Name.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.GetFutureTime.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.GetFutureTime"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.GetNextViableDate">
            <summary>
            Return the next viable date of a timex expression based on the current date and user's timezone.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.GetNextViableDate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.GetNextViableDate"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.GetNextViableTime">
            <summary>
            Return the next viable time of a timex expression based on the current time and user's timezone.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.GetNextViableTime.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.GetNextViableTime"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.GetPastTime">
            <summary>
            Return the current timestamp minus the specified time units.
            GetPastTime function takes an interval integer, a unit of time string,
            an optional format string whose default value "yyyy-MM-ddTHH:mm:ss.fffZ"
            and an optional locale string whose default value is Thread.CurrentThread.CurrentCulture.Name.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.GetPastTime.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.GetPastTime"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.GetPreviousViableDate">
            <summary>
            Return the previous viable date of a timex expression based on the current date and user's timezone.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.GetPreviousViableDate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.GetPreviousViableDate"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.GetPreviousViableTime">
            <summary>
            Return the previous viable time of a timex expression based on the current time and user's timezone.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.GetPreviousViableTime.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.GetPreviousViableTime"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.GetProperty">
            <summary>
            Retrieve the value of the specified property from the JSON object.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.GetProperty.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.GetProperty"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.GetTimeOfDay">
            <summary>
            Returns time of day for a given timestamp.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.GetTimeOfDay.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.GetTimeOfDay"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.GreaterThan">
            <summary>
            Check whether the first value is greater than the second value.
            Return true if the first value is more, or return false if less.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.GreaterThan.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.GreaterThan"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.GreaterThanOrEqual">
            <summary>
            Check whether the first value is greater than or equal to the second value. Return true when the first value is greater or equal,
            or return false if the first value is less.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.GreaterThanOrEqual.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.GreaterThanOrEqual"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.If">
            <summary>
            Check whether an expression is true or false. Based on the result, return a specified value.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.If.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.If"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Ignore">
            <summary>
             Mark a clause so that MostSpecificSelector will ignore it.
             MostSpecificSelector considers A &amp; B to be more specific than A, but some clauses are unique and incomparable.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Ignore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Ignore"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.IndexOf">
            <summary>
            Return the starting position or index value of a substring. This function is case-insensitive, and indexes start with the number 0.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.IndexOf.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.IndexOf"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.IndicesAndValues">
            <summary>
            Turn an array or object into an array of objects with index (current index) and value properties.
            For arrays, the index is the position in the array.
            For objects, it is the key for the value.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.IndicesAndValues.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.IndicesAndValues"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Int">
            <summary>
            Return the integer version of a string.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Int.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Int"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Intersection">
            <summary>
            Return a collection that has only the common items across the specified collections.
            To appear in the result, an item must appear in all the collections passed to this function.
            If one or more items have the same name,
            the last item with that name appears in the result.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Intersection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Intersection"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.IsArray">
            <summary>
            Return true if a given input is an array.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.IsArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.IsArray"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.IsBoolean">
            <summary>
            Return true if a given input is a Boolean.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.IsBoolean.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.IsBoolean"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.IsDate">
            <summary>
            Return true if a given TimexProperty or Timex expression refers to a valid date.
            Valid dates contain the month and dayOfMonth, or contain the dayOfWeek.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.IsDate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.IsDate"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.IsDateRange">
            <summary>
            Return true if a given TimexProperty or Timex expression refers to a valid date range.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.IsDateRange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.IsDateRange"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.IsDateTime">
            <summary>
            Return true if a given input is a UTC ISO format (YYYY-MM-DDTHH:mm:ss.fffZ) timestamp string.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.IsDateTime.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.IsDateTime"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.IsDefinite">
            <summary>
            Return true if a given TimexProperty or Timex expression refers to a valid date. Valid dates contain the year, month and dayOfMonth.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.IsDefinite.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.IsDefinite"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.IsDuration">
            <summary>
            Return true if a given TimexProperty or Timex expression refers to a valid duration.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.IsDuration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.IsDuration"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.IsFloat">
            <summary>
            Return true if a given input is a floating-point number.
            Due to the alignment between C#and JavaScript, a number with an non-zero residue of its modulo 1 will be treated as a floating-point number.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.IsFloat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.IsFloat"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.IsInteger">
            <summary>
            Return true if a given input is an integer number. Due to the alignment between C# and JavaScript, a number with an zero residue of its modulo 1 will be treated as an integer number.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.IsInteger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.IsInteger"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.IsMatch">
            <summary>
            Return true if a given string is matches a specified regular expression pattern.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.IsMatch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.IsMatch"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.IsObject">
            <summary>
            Return true if a given input is a complex object or return false if it is a primitive object.
            Primitive objects include strings, numbers, and Booleans;
            complex types, like classes, contain properties.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.IsObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.IsObject"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.IsPresent">
            <summary>
            Return true if a given TimexProperty or Timex expression refers to the present.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.IsPresent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.IsPresent"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.IsString">
            <summary>
            Return true if a given input is a string.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.IsString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.IsString"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.IsTime">
            <summary>
            Return true if a given TimexProperty or Timex expression refers to a valid time.
            Valid time contains hours, minutes and seconds.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.IsTime.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.IsTime"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.IsTimeRange">
            <summary>
            Return true if a given TimexProperty or Timex expression refers to a valid time range Valid time ranges contain partOfDay.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.IsTimeRange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.IsTimeRange"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Join">
            <summary>
            Return a string that has all the items from an array, with each character separated by a delimiter.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Join.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Join"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.JPath">
            <summary>
            Check JSON or a JSON string for nodes or values that match a path expression, and return the matching nodes.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.JPath.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.JPath"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Json">
            <summary>
            Return the JavaScript Object Notation (JSON) type value or object of a string or XML.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Json.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Json"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.JsonStringify">
            <summary>
            Return the json string of a value.
            String function takes an object as the argument.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.JsonStringify.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.JsonStringify"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Last">
            <summary>
            Return the last item from a collection.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Last.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Last"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.LastIndexOf">
            <summary>
            Return the starting position or index value of the last occurrence of a substring.
            This function is case-insensitive, and indexes start with the number 0.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.LastIndexOf.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.LastIndexOf"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Length">
            <summary>
            Return the length of a string.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Length.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Length"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.LessThan">
            <summary>
            Check whether the first value is less than the second value.
            Return true if the first value is less, or return false if the first value is more.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.LessThan.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.LessThan"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.LessThanOrEqual">
            <summary>
            Check whether the first value is less than or equal to the second value.
            Return true if the first value is less than or equal, or return false if the first value is more.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.LessThanOrEqual.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.LessThanOrEqual"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Max">
            <summary>
            Return the highest value from a list or array. The list or arary is inclusive at both ends.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Max.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Max"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Merge">
            <summary>
            Merge two object(json) into one object(json).
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Merge.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Merge"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Min">
            <summary>
            Return the lowest value from a set of numbers or an array.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Min.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Min"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Mod">
            <summary>
            Return the remainder from dividing two numbers. 
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Mod.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Mod"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Month">
            <summary>
            Return the month of the specified timestamp.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Month.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Month"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Multiply">
            <summary>
            Return the product from multiplying two numbers.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Multiply.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Multiply"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.MultivariateNumericEvaluator">
            <summary>
            Numeric operators that can have 2 or more args.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.MultivariateNumericEvaluator.#ctor(System.String,System.Func{System.Collections.Generic.IReadOnlyList{System.Object},System.Object},AdaptiveExpressions.FunctionUtils.VerifyExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.MultivariateNumericEvaluator"/> class.
            </summary>
            <param name="type">Name of the function.</param>
            <param name="function"> The multivariate numeric function, it takes a list of objects as input and returns an object.</param>
            <param name = "verify" > Optional function to verify each child's result.</param>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.NewGuid">
            <summary>
            Return a new Guid string.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.NewGuid.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.NewGuid"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Not">
            <summary>
            Check whether an expression is false.
            Return true if the expression is false, or return false if true.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Not.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Not"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.NotEqual">
            <summary>
            return true if the two items are not equal.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.NotEqual.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.NotEqual"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.NumberTransformEvaluator">
            <summary>
            Evaluator that transforms a number to another number.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.NumberTransformEvaluator.#ctor(System.String,System.Func{System.Collections.Generic.IReadOnlyList{System.Object},System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.NumberTransformEvaluator"/> class.
            </summary>
            <param name="type">Name of the function.</param>
            <param name="function"> The number tranform function, it takes a list of objects as input and returns an object.</param>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.NumericEvaluator">
            <summary>
            Numeric operators that can have 1 or more args.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.NumericEvaluator.#ctor(System.String,System.Func{System.Collections.Generic.IReadOnlyList{System.Object},System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.NumericEvaluator"/> class.
            </summary>
            <param name="type">Name of the function.</param>
            <param name="function"> The numeric function, it takes a list of objects as input and returns an object.</param>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Optional">
            <summary>
            For the MostSpecificSelector, this is a short hand so that instead of having to do A &amp; B and A you can do A &amp; optional(B) to mean the same thing.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Optional.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Optional"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Or">
            <summary>
            Check whether at least one expression is true.
            Return true if at least one expression is true, or return false if all are false.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Or.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Or"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Power">
            <summary>
            Return exponentiation of one number to another.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Power.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Power"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Rand">
            <summary>
            Return a random integer from a specified range, which is inclusive only at the starting end.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Rand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Rand"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Range">
            <summary>
            Return an integer array that starts from a specified integer.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Range.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Range"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.RemoveProperty">
            <summary>
            Remove a property from an object and return the updated object.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.RemoveProperty.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.RemoveProperty"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Replace">
            <summary>
            Replace a substring with the specified string,
            and return the result string.
            This function is case-sensitive.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Replace.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Replace"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.ReplaceIgnoreCase">
            <summary>
            Replace a substring with the specified string, and return the result string.
            This function is case-insensitive.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.ReplaceIgnoreCase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.ReplaceIgnoreCase"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Reverse">
            <summary>
            Reverses the order of the elements in a String or Array.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Reverse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Reverse"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Round">
            <summary>
            Rounds a number value to the nearest integer.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Round.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Round"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Select">
            <summary>
            Operate on each element and return the new collection of transformed elements.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Select.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Select"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.SentenceCase">
            <summary>
            Converts the specified string to sentence case.
            SentenceCase function takes a string as the first argument 
            and an optional locale string whose default value is Thread.CurrentThread.CurrentCulture.Name.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.SentenceCase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.SentenceCase"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.SetPathToValue">
            <summary>
            Retrieve the value of the specified property from the JSON object.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.SetPathToValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.SetPathToValue"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.SetProperty">
            <summary>
            Set the value of an object's property and return the updated object. 
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.SetProperty.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.SetProperty"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Skip">
            <summary>
            Remove items from the front of a collection, and return all the other items.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Skip.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Skip"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.SortBy">
            <summary>
            Sort elements in the collection in ascending order and return the sorted collection.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.SortBy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.SortBy"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.SortByDescending">
            <summary>
            Sort elements in the collection in descending order, and return the sorted collection.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.SortByDescending.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.SortByDescending"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Split">
            <summary>
            Return an array that contains substrings, separated by commas, based on the specified delimiter character in the original string.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Split.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Split"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.StartOfDay">
            <summary>
            Return the start of the day for a timestamp.
            StartOfDay function takes a timestamp string,
            an optional format string whose default value "yyyy-MM-ddTHH:mm:ss.fffZ"
            and an optional locale string whose default value is Thread.CurrentThread.CurrentCulture.Name.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.StartOfDay.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.StartOfDay"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.StartOfHour">
            <summary>
            Return the start of the hour for a timestamp.
            StartOfHour function takes a timestamp string,
            an optional format string whose default value "yyyy-MM-ddTHH:mm:ss.fffZ"
            and an optional locale string whose default value is Thread.CurrentThread.CurrentCulture.Name.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.StartOfHour.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.StartOfHour"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.StartOfMonth">
            <summary>
            Return the start of the month for a timestamp.
            StartOfMonth function takes a timestamp string,
            an optional format string whose default value "yyyy-MM-ddTHH:mm:ss.fffZ"
            and an optional locale string whose default value is Thread.CurrentThread.CurrentCulture.Name.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.StartOfMonth.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.StartOfMonth"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.StartsWith">
            <summary>
            Check whether a string starts with a specific substring. Return true if the substring is found, or return false if not found.
            This function is case-insensitive.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.StartsWith.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.StartsWith"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.String">
            <summary>
            Return the string version of a value.
            String function takes an object as the first argument and an optional locale string.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.String.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.String"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.StringTransformEvaluator">
            <summary>
            Evaluator that transforms a string to another string.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.StringTransformEvaluator.#ctor(System.String,System.Func{System.Collections.Generic.IReadOnlyList{System.Object},System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.StringTransformEvaluator"/> class.
            </summary>
            <param name="type">Name of the built-in function.</param>
            <param name="function">The string transformation function, it takes a list of objects and returns an object.</param>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.StringTransformEvaluator.#ctor(System.String,System.Func{System.Collections.Generic.IReadOnlyList{System.Object},AdaptiveExpressions.Options,System.ValueTuple{System.Object,System.String}})">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.StringTransformEvaluator"/> class.
            </summary>
            <param name="type">Name of the built-in function.</param>
            <param name="function">The string transformation function, it takes a list of objects, an <see cref="T:AdaptiveExpressions.Options"/> instance and returns a (object, string) tuple.</param>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.SubArray">
            <summary>
            Returns a subarray from specified start and end positions. Index values start with the number 0.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.SubArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.SubArray"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Substring">
            <summary>
            Return characters from a string, starting from the specified position or index. Index values start with the number 0.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Substring.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Substring"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Subtract">
            <summary>
            Return the result from subtracting the second number from the first number.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Subtract.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Subtract"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.SubtractFromTime">
            <summary>
            Subtract a number of time units from a timestamp.
            SubtractFromTime function takes a timestamp string, an interval integer, a unit of time string,
            an optional format string whose default value "yyyy-MM-ddTHH:mm:ss.fffZ"
            and an optional locale string whose default value is Thread.CurrentThread.CurrentCulture.Name.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.SubtractFromTime.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.SubtractFromTime"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Sum">
            <summary>
            Return the result from adding numbers in a list.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Sum.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Sum"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Take">
            <summary>
            Return items from the front of a collection.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Take.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Take"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Ticks">
            <summary>
            Return the ticks property value of a specified timestamp. A tick is 100-nanosecond interval.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Ticks.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Ticks"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.TicksToDays">
            <summary>
            Convert ticks to days number.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.TicksToDays.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.TicksToDays"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.TicksToHours">
            <summary>
            Convert ticks to hours number.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.TicksToHours.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.TicksToHours"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.TicksToMinutes">
            <summary>
            Convert ticks to minutes number.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.TicksToMinutes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.TicksToMinutes"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.TimeTransformEvaluator">
            <summary>
            Evaluator that transforms a date-time to another date-time.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.TimeTransformEvaluator.#ctor(System.String,System.Func{System.DateTime,System.Int32,System.DateTime})">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.TimeTransformEvaluator"/> class.
            </summary>
            <param name="type">Name of the built-in function.</param>
            <param name="function">The time transformation function, it takes a DateTime object and an integer, returns a DateTime object.</param>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.TimexResolve">
            <summary>
            Return true if a given TimexProperty or Timex expression refers to a valid time.
            Valid time contains hours, minutes and seconds.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.TimexResolve.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.TimexResolve"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.TitleCase">
            <summary>
            Converts the specified string to title case.
            TitleCase function takes a string as the first argument 
            and an optional locale string whose default value is Thread.CurrentThread.CurrentCulture.Name.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.TitleCase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.TitleCase"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.ToLower">
            <summary>
            Return a string in lowercase format.
            ToLower function takes a string as the first argument 
            and an optional locale string whose default value is Thread.CurrentThread.CurrentCulture.Name.
            If a character in the string doesn't have a lowercase version, that character stays unchanged in the returned string.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.ToLower.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.ToLower"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.ToUpper">
            <summary>
            Return a string in uppercase format.
            ToUpper function takes a string as the first argument 
            and an optional locale string whose default value is Thread.CurrentThread.CurrentCulture.Name.
            If a character in the string doesn't have an uppercase version, that character stays unchanged in the returned string.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.ToUpper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.ToUpper"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Trim">
            <summary>
            Remove leading and trailing whitespace from a string, and return the updated string.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Trim.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Trim"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Union">
            <summary>
            Return a collection that has all the items from the specified collections.
            To appear in the result, an item can appear in any collection passed to this function.
            If one or more items have the same name, the last item with that name appears in the result.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Union.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Union"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Unique">
            <summary>
            Remove all duplicates from an array.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Unique.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Unique"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.UriComponent">
            <summary>
            Return the binary version of a uniform resource identifier (URI) component.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.UriComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.UriComponent"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.UriComponentToString">
            <summary>
            Return the string version of a uniform resource identifier (URI) encoded string, effectively decoding the URI-encoded string.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.UriComponentToString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.UriComponentToString"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.UriHost">
            <summary>
            Return the host value of a unified resource identifier (URI).
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.UriHost.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.UriHost"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.UriPath">
            <summary>
            Return the path value of a unified resource identifier (URI).
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.UriPath.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.UriPath"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.UriPathAndQuery">
            <summary>
            Return the path and query value of a unified resource identifier (URI).
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.UriPathAndQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.UriPathAndQuery"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.UriPort">
            <summary>
            Return the port value of a unified resource identifier (URI).
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.UriPort.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.UriPort"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.UriQuery">
            <summary>
            Return the query value of a unified resource identifier (URI).
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.UriQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.UriQuery"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.UriScheme">
            <summary>
            Return the scheme value of a unified resource identifier (URI).
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.UriScheme.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.UriScheme"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.UtcNow">
            <summary>
            Return the current timestamp.
            UtcNow function takes an optional format string whose default value "yyyy-MM-ddTHH:mm:ss.fffZ"
            and an optional locale string whose default value is Thread.CurrentThread.CurrentCulture.Name.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.UtcNow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.UtcNow"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Where">
            <summary>
            Filter on each element and return the new collection of filtered elements which match a specific condition.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Where.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Where"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Xml">
            <summary>
            Return the XML version of a string that contains a JSON object.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Xml.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Xml"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.XPath">
            <summary>
            Check XML for nodes or values that match an XPath (XML Path Language) expression, and return the matching nodes or values.
            An XPath expression (referred to as XPath) helps you navigate an XML document structure so that you can select nodes or compute values in the XML content.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.XPath.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.XPath"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.BuiltinFunctions.Year">
            <summary>
            Return the year of the specified timestamp.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.BuiltinFunctions.Year.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.BuiltinFunctions.Year"/> class.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.CommonRegex">
            <summary>
            Convert PCRE regex string to <see cref="T:System.Text.RegularExpressions.Regex"/> object.
            PCRE ref: http://www.pcre.org/.
            PCRE antlr g4 file: CommonRegex.g4.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegex.CreateRegex(System.String)">
            <summary>
            Create <see cref="T:System.Text.RegularExpressions.Regex"/> object from PCRE pattern string.
            </summary>
            <param name="pattern">PCRE pattern string.</param>
            <returns>Regex object.</returns>
        </member>
        <member name="T:AdaptiveExpressions.Constant">
            <summary>
            Constant expression.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Constant.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Constant"/> class.
            Construct an expression constant.
            </summary>
            <param name="value">Constant value.</param>
        </member>
        <member name="P:AdaptiveExpressions.Constant.Value">
            <summary>
            Gets or sets constant value.
            </summary>
            <value>
            Constant value.
            </value>
        </member>
        <member name="M:AdaptiveExpressions.Constant.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string value.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Constant.DeepEquals(AdaptiveExpressions.Expression)">
            <summary>
            Determines if the current Expression instance is deep equal to another one.
            </summary>
            <param name="other">The other Expression instance to compare.</param>
            <returns>A boolean value indicating  whether the two Expressions are deep equal. Reyurns True if they are deep equal, otherwise return False.</returns>
        </member>
        <member name="T:AdaptiveExpressions.Converters.ArrayExpressionConverter`1">
            <summary>
            Converter which allows json to be expression to object or static object.
            </summary>
            <typeparam name="T">The type of the items of the array.</typeparam>
        </member>
        <member name="P:AdaptiveExpressions.Converters.ArrayExpressionConverter`1.CanRead">
            <summary>
            Gets a value indicating whether this Converter can read JSON.
            </summary>
            <value>true if this Converter can read JSON; otherwise, false.</value>
        </member>
        <member name="M:AdaptiveExpressions.Converters.ArrayExpressionConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,AdaptiveExpressions.Properties.ArrayExpression{`0},System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The Newtonsoft.Json.JsonReader to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="hasExistingValue">A boolean value indicating whether there is an existing value of object to be read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>An ArrayExpression instance.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Converters.ArrayExpressionConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,AdaptiveExpressions.Properties.ArrayExpression{`0},Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The Newtonsoft.Json.JsonWriter to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:AdaptiveExpressions.Converters.BoolExpressionConverter">
            <summary>
            Converter which allows json to be expression to object or static object.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Converters.BoolExpressionConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Converters.BoolExpressionConverter"/> class.
            </summary>
        </member>
        <member name="P:AdaptiveExpressions.Converters.BoolExpressionConverter.CanRead">
            <summary>
            Gets a value indicating whether this Converter can read JSON.
            </summary>
            <value>true if this Converter can read JSON; otherwise, false.</value>
        </member>
        <member name="M:AdaptiveExpressions.Converters.BoolExpressionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,AdaptiveExpressions.Properties.BoolExpression,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The Newtonsoft.Json.JsonReader to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="hasExistingValue">A boolean value indicating whether there is an existing value of object to be read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>A BoolExpression instance.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Converters.BoolExpressionConverter.WriteJson(Newtonsoft.Json.JsonWriter,AdaptiveExpressions.Properties.BoolExpression,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The Newtonsoft.Json.JsonWriter to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:AdaptiveExpressions.Converters.EnumExpressionConverter`1">
            <summary>
            Converter which allows json to be expression to object or static object.
            </summary>
            <typeparam name="T">The enum type to construct.</typeparam>
        </member>
        <member name="M:AdaptiveExpressions.Converters.EnumExpressionConverter`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Converters.EnumExpressionConverter`1"/> class.
            </summary>
        </member>
        <member name="P:AdaptiveExpressions.Converters.EnumExpressionConverter`1.CanRead">
            <summary>
            Gets a value indicating whether this Converter can read JSON.
            </summary>
            <value>true if this Converter can read JSON; otherwise, false.</value>
        </member>
        <member name="M:AdaptiveExpressions.Converters.EnumExpressionConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,AdaptiveExpressions.Properties.EnumExpression{`0},System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The Newtonsoft.Json.JsonReader to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="hasExistingValue">A boolean value indicating whether there is an existing value of object to be read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>An EnumExpression instance.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Converters.EnumExpressionConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,AdaptiveExpressions.Properties.EnumExpression{`0},Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The Newtonsoft.Json.JsonWriter to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:AdaptiveExpressions.Converters.ExpressionConverter">
            <summary>
            Converter for Expression objects - string.
            </summary>
        </member>
        <member name="P:AdaptiveExpressions.Converters.ExpressionConverter.CanRead">
            <summary>
            Gets a value indicating whether this Converter can read JSON.
            </summary>
            <value>true if this Converter can read JSON; otherwise, false.</value>
        </member>
        <member name="M:AdaptiveExpressions.Converters.ExpressionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,AdaptiveExpressions.Expression,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The Newtonsoft.Json.JsonReader to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="hasExistingValue">A boolean value indicating whether there is an existing value of object to be read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>An Expression instance.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Converters.ExpressionConverter.WriteJson(Newtonsoft.Json.JsonWriter,AdaptiveExpressions.Expression,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The Newtonsoft.Json.JsonWriter to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:AdaptiveExpressions.Converters.ExpressionPropertyConverter`1">
            <summary>
            Converter which allows json to be expression to object or static object.
            </summary>
            <typeparam name="T">The property type to construct.</typeparam>
        </member>
        <member name="P:AdaptiveExpressions.Converters.ExpressionPropertyConverter`1.CanRead">
            <summary>
            Gets a value indicating whether this Converter can read JSON.
            </summary>
            <value>true if this Converter can read JSON; otherwise, false.</value>
        </member>
        <member name="M:AdaptiveExpressions.Converters.ExpressionPropertyConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,AdaptiveExpressions.Properties.ExpressionProperty{`0},System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The Newtonsoft.Json.JsonReader to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="hasExistingValue">A boolean value indicating whether there is an existing value of object to be read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>An ExpressionProperty instance.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Converters.ExpressionPropertyConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,AdaptiveExpressions.Properties.ExpressionProperty{`0},Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The Newtonsoft.Json.JsonWriter to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:AdaptiveExpressions.Converters.IntExpressionConverter">
            <summary>
            Converter which allows json to be expression to object or static object.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Converters.IntExpressionConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Converters.IntExpressionConverter"/> class.
            </summary>
        </member>
        <member name="P:AdaptiveExpressions.Converters.IntExpressionConverter.CanRead">
            <summary>
            Gets a value indicating whether this Converter can read JSON.
            </summary>
            <value>true if this Converter can read JSON; otherwise, false.</value>
        </member>
        <member name="M:AdaptiveExpressions.Converters.IntExpressionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,AdaptiveExpressions.Properties.IntExpression,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The Newtonsoft.Json.JsonReader to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="hasExistingValue">A boolean value indicating whether there is an existing value of object to be read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>An IntExpression instance.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Converters.IntExpressionConverter.WriteJson(Newtonsoft.Json.JsonWriter,AdaptiveExpressions.Properties.IntExpression,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The Newtonsoft.Json.JsonWriter to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:AdaptiveExpressions.Converters.NumberExpressionConverter">
            <summary>
            Converter which allows json to be expression to object or static object.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Converters.NumberExpressionConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Converters.NumberExpressionConverter"/> class.
            </summary>
        </member>
        <member name="P:AdaptiveExpressions.Converters.NumberExpressionConverter.CanRead">
            <summary>
            Gets a value indicating whether this Converter can read JSON.
            </summary>
            <value>true if this Converter can read JSON; otherwise, false.</value>
        </member>
        <member name="M:AdaptiveExpressions.Converters.NumberExpressionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,AdaptiveExpressions.Properties.NumberExpression,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The Newtonsoft.Json.JsonReader to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="hasExistingValue">A boolean value indicating whether there is an existing value of object to be read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>A NumberExpression instance.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Converters.NumberExpressionConverter.WriteJson(Newtonsoft.Json.JsonWriter,AdaptiveExpressions.Properties.NumberExpression,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The Newtonsoft.Json.JsonWriter to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:AdaptiveExpressions.Converters.ObjectExpressionConverter`1">
            <summary>
            Converter which allows json to be expression to object or static object.
            </summary>
            <typeparam name="T">The property type to construct.</typeparam>
        </member>
        <member name="P:AdaptiveExpressions.Converters.ObjectExpressionConverter`1.CanRead">
            <summary>
            Gets a value indicating whether this Converter can read JSON.
            </summary>
            <value>true if this Converter can read JSON; otherwise, false.</value>
        </member>
        <member name="M:AdaptiveExpressions.Converters.ObjectExpressionConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,AdaptiveExpressions.Properties.ObjectExpression{`0},System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The Newtonsoft.Json.JsonReader to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="hasExistingValue">A boolean value indicating whether there is an existing value of object to be read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>A ObjectExpression instance.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Converters.ObjectExpressionConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,AdaptiveExpressions.Properties.ObjectExpression{`0},Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The Newtonsoft.Json.JsonWriter to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:AdaptiveExpressions.Converters.StringExpressionConverter">
            <summary>
            Converter which allows json to be expression to object or static object.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Converters.StringExpressionConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Converters.StringExpressionConverter"/> class.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Converters.StringExpressionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,AdaptiveExpressions.Properties.StringExpression,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The Newtonsoft.Json.JsonReader to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="hasExistingValue">A boolean value indicating whether there is an existing value of object to be read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>A StringExpression instance.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Converters.StringExpressionConverter.WriteJson(Newtonsoft.Json.JsonWriter,AdaptiveExpressions.Properties.StringExpression,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The Newtonsoft.Json.JsonWriter to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:AdaptiveExpressions.Converters.ValueExpressionConverter">
            <summary>
            Converter which allows json to be expression to object or static object.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Converters.ValueExpressionConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Converters.ValueExpressionConverter"/> class.
            </summary>
        </member>
        <member name="P:AdaptiveExpressions.Converters.ValueExpressionConverter.CanRead">
            <summary>
            Gets a value indicating whether this Converter can read JSON.
            </summary>
            <value>true if this Converter can read JSON; otherwise, false.</value>
        </member>
        <member name="M:AdaptiveExpressions.Converters.ValueExpressionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,AdaptiveExpressions.Properties.ValueExpression,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The Newtonsoft.Json.JsonReader to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="hasExistingValue">A boolean value indicating whether there is an existing value of object to be read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>A ValueExpression instance.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Converters.ValueExpressionConverter.WriteJson(Newtonsoft.Json.JsonWriter,AdaptiveExpressions.Properties.ValueExpression,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The Newtonsoft.Json.JsonWriter to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:AdaptiveExpressions.ReturnType">
            <summary>
            Type expected from evaluating an expression.
            </summary>
        </member>
        <member name="F:AdaptiveExpressions.ReturnType.Boolean">
            <summary>
            True or false boolean value.
            </summary>
        </member>
        <member name="F:AdaptiveExpressions.ReturnType.Number">
            <summary>
            Numerical value like int, float, double, ...
            </summary>
        </member>
        <member name="F:AdaptiveExpressions.ReturnType.Object">
            <summary>
            Any value is possible.
            </summary>
        </member>
        <member name="F:AdaptiveExpressions.ReturnType.String">
            <summary>
            String value.
            </summary>
        </member>
        <member name="F:AdaptiveExpressions.ReturnType.Array">
            <summary>
            Array value.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.Expression">
            <summary>
            An expression which can be analyzed or evaluated to produce a value.
            </summary>
            <remarks>
            This provides an open-ended wrapper that supports a number of built-in functions and can also be extended at runtime.
            It also supports validation of the correctness of an expression and evaluation that should be exception free.
            </remarks>
        </member>
        <member name="F:AdaptiveExpressions.Expression.Functions">
            <summary>
            Dictionary of function => ExpressionEvaluator.
            </summary>
            <remarks>
            This is all available functions, you can add custom functions to it, but you cannot
            replace builtin functions.  If you clear the dictionary, it will be reset to the built in functions.
            </remarks>
        </member>
        <member name="M:AdaptiveExpressions.Expression.#ctor(System.String,AdaptiveExpressions.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Expression"/> class.
            Built-in expression constructor.
            </summary>
            <param name="type">Type of built-in expression from <see cref="T:AdaptiveExpressions.ExpressionType"/>.</param>
            <param name="children">Child expressions.</param>
        </member>
        <member name="M:AdaptiveExpressions.Expression.#ctor(AdaptiveExpressions.ExpressionEvaluator,AdaptiveExpressions.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Expression"/> class.
            Expression constructor.
            </summary>
            <param name="evaluator">Information about how to validate and evaluate expression.</param>
            <param name="children">Child expressions.</param>
        </member>
        <member name="P:AdaptiveExpressions.Expression.Type">
            <summary>
            Gets type of expression.
            </summary>
            <value>
            Type of expression.
            </value>
        </member>
        <member name="P:AdaptiveExpressions.Expression.Evaluator">
            <summary>
            Gets expression evaluator.
            </summary>
            <value>
            expression evaluator.
            </value>
        </member>
        <member name="P:AdaptiveExpressions.Expression.Children">
            <summary>
            Gets or sets children expressions.
            </summary>
            <value>
            Children expressions.
            </value>
        </member>
        <member name="P:AdaptiveExpressions.Expression.ReturnType">
            <summary>
            Gets expected result of evaluating expression.
            </summary>
            <value>
            Expected result of evaluating expression.
            </value>
        </member>
        <member name="M:AdaptiveExpressions.Expression.op_Implicit(System.String)~AdaptiveExpressions.Expression">
            <summary>
            allow a string to be implicitly assigned to an expression property.
            </summary>
            <param name="expression">string expression.</param>
        </member>
        <member name="M:AdaptiveExpressions.Expression.Parse(System.String,AdaptiveExpressions.EvaluatorLookup)">
            <summary>
            Parse an expression string into an expression object.
            </summary>
            <param name="expression">expression string.</param>
            <param name="lookup">Optional function lookup when parsing the expression. Default is Expression.Lookup which uses Expression.Functions table.</param>
            <returns>expression object.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.Lookup(System.String)">
            <summary>
            Lookup a ExpressionEvaluator (function) by name.
            </summary>
            <param name="functionName">function name.</param>
            <returns>ExpressionEvaluator.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.MakeExpression(System.String,AdaptiveExpressions.Expression[])">
            <summary>
            Make an expression and validate it.
            </summary>
            <param name="type">Type of expression from <see cref="T:AdaptiveExpressions.ExpressionType"/>.</param>
            <param name="children">Child expressions.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.MakeExpression(AdaptiveExpressions.ExpressionEvaluator,AdaptiveExpressions.Expression[])">
            <summary>
            Make an expression and validate it.
            </summary>
            <param name="evaluator">Information about how to validate and evaluate expression.</param>
            <param name="children">Child expressions.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.LambaExpression(AdaptiveExpressions.EvaluateExpressionDelegate)">
            <summary>
            Construct an expression from a <see cref="T:AdaptiveExpressions.EvaluateExpressionDelegate"/>.
            </summary>
            <param name="function">Function to create an expression from.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.Lambda(System.Func{System.Object,System.Object})">
            <summary>
            Construct an expression from a lambda expression over the state.
            </summary>
            <remarks>Exceptions will be caught and surfaced as an error string.</remarks>
            <param name="function">Lambda expression to evaluate.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.SetPathToValue(AdaptiveExpressions.Expression,AdaptiveExpressions.Expression)">
            <summary>
            Construct and validate an Set a property expression to a value expression.
            </summary>
            <param name="property">property expression.</param>
            <param name="value">value expression.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.SetPathToValue(AdaptiveExpressions.Expression,System.Object)">
            <summary>
            Construct and validate an Set a property expression to a value expression.
            </summary>
            <param name="property">property expression.</param>
            <param name="value">value object.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.EqualsExpression(AdaptiveExpressions.Expression[])">
            <summary>
            Construct and validate an Equals expression.
            </summary>
            <param name="children">Child clauses.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.AndExpression(AdaptiveExpressions.Expression[])">
            <summary>
            Construct and validate an And expression.
            </summary>
            <param name="children">Child clauses.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.OrExpression(AdaptiveExpressions.Expression[])">
            <summary>
            Construct and validate an Or expression.
            </summary>
            <param name="children">Child clauses.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.NotExpression(AdaptiveExpressions.Expression)">
            <summary>
            Construct and validate a Not expression.
            </summary>
            <param name="child">Child clauses.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.ConstantExpression(System.Object)">
            <summary>
            Construct a constant expression.
            </summary>
            <param name="value">Constant value.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.Accessor(System.String,AdaptiveExpressions.Expression)">
            <summary>
            Construct and validate a property accessor.
            </summary>
            <param name="property">Property to lookup.</param>
            <param name="instance">Expression to get instance that contains property or null for global state.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.DeepEquals(AdaptiveExpressions.Expression)">
            <summary>
            Do a deep equality between expressions.
            </summary>
            <param name="other">Other expression.</param>
            <returns>True if expressions are the same.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.References">
            <summary>
            Return the static reference paths to memory.
            </summary>
            <remarks>
            Return all static paths to memory.  If there is a computed element index, then the path is terminated there,
            but you might get other paths from the computed part as well.
            </remarks>
            <returns>List of the static reference paths.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.ReferenceWalk(AdaptiveExpressions.Expression,System.Func{AdaptiveExpressions.Expression,System.Boolean})">
            <summary>
            Walking function for identifying static memory references in an expression.
            </summary>
            <param name="expression">Expression to analyze.</param>
            <param name="extension">If present, called to override lookup for things like template expansion.</param>
            <returns>Accessor path of expression which is a potential partial path and the full path found so far.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.Validate">
            <summary>
            Validate immediate expression.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Expression.ValidateTree">
            <summary>
            Recursively validate the expression tree.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Expression.TryEvaluate(System.Object,AdaptiveExpressions.Options)">
            <summary>
            Evaluate the expression.
            </summary>
            <param name="state">
            Global state to evaluate accessor expressions against.  Can be <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Collections.IDictionary"/> otherwise reflection is used to access property and then indexer.
            </param>
            <param name="options">Options used in the evaluation. </param>
            <returns>Computed value and an error string.  If the string is non-null, then there was an evaluation error.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.TryEvaluate(AdaptiveExpressions.Memory.IMemory,AdaptiveExpressions.Options)">
            <summary>
            Evaluate the expression.
            </summary>
            <param name="state">
            Global state to evaluate accessor expressions against.  Can be <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Collections.IDictionary"/> otherwise reflection is used to access property and then indexer.
            </param>
            <param name="options">Options used in the evaluation. </param>
            <returns>Computed value and an error string.  If the string is non-null, then there was an evaluation error.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.TryEvaluate``1(System.Object,AdaptiveExpressions.Options)">
            <summary>
            Evaluate the expression.
            </summary>
            <typeparam name="T">type of result of the expression.</typeparam>
            <param name="state">
            Global state to evaluate accessor expressions against.  Can be <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Collections.IDictionary"/> otherwise reflection is used to access property and then indexer.
            </param>
            <param name="options">Options used in the evaluation. </param>
            <returns>Computed value and an error string.  If the string is non-null, then there was an evaluation error.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.TryEvaluate``1(AdaptiveExpressions.Memory.IMemory,AdaptiveExpressions.Options)">
            <summary>
            Evaluate the expression.
            </summary>
            <typeparam name="T">type of result of the expression.</typeparam>
            <param name="state">
            Global state to evaluate accessor expressions against.  Can be <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Collections.IDictionary"/> otherwise reflection is used to access property and then indexer.
            </param>
            <param name="options">Options used in the evaluation. </param>
            <returns>Computed value and an error string.  If the string is non-null, then there was an evaluation error.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string value of this Expression.</returns>
        </member>
        <member name="T:AdaptiveExpressions.Expression.FunctionTable">
            <summary>
            FunctionTable is a dictionary which merges BuiltinFunctions.Functions with a CustomDictionary.
            </summary>
        </member>
        <member name="P:AdaptiveExpressions.Expression.FunctionTable.Keys">
            <summary>
            Gets a collection of string values that represent the keys of the StandardFunctions. 
            </summary>
            <value> A list of string values.</value>
        </member>
        <member name="P:AdaptiveExpressions.Expression.FunctionTable.Values">
            <summary>
            Gets a collection of ExpressionEvaluator which is the value of the StandardFunctions.
            </summary>
            <value>A list of ExpressionEvaluator.</value>
        </member>
        <member name="P:AdaptiveExpressions.Expression.FunctionTable.Count">
            <summary>
            Gets a value of the total number of StandardFunctions and user custom functions.
            </summary>
            <value>An integer value.</value>
        </member>
        <member name="P:AdaptiveExpressions.Expression.FunctionTable.IsReadOnly">
            <summary>
            Gets a value indicating whether the FunctionTable is readonly.
            </summary>
            <value>A boolean value indicating whether the FunctionTable is readonly.</value>
        </member>
        <member name="P:AdaptiveExpressions.Expression.FunctionTable.Item(System.String)">
            <summary>
            Gets a value of ExpressionEvaluator corresponding to the given key.
            </summary>
            <param name="key">A string value of function name.</param>
            <returns>An ExpressionEvaluator.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.FunctionTable.Add(System.String,AdaptiveExpressions.ExpressionEvaluator)">
            <summary>
            Inserts a mapping of a string key to ExpressionEvaluator into FunctionTable.
            </summary>
            <param name="key">The function name to be added.</param>
            <param name="value">The value of the ExpressionEvaluator to be added.</param>
        </member>
        <member name="M:AdaptiveExpressions.Expression.FunctionTable.Add(System.String,System.Func{System.Collections.Generic.IReadOnlyList{System.Object},System.Object})">
            <summary>
            Inserts a mapping of a string key to user customized function into FunctionTable.
            </summary>
            <param name="key">The key of function name to be added.</param>
            <param name="func">The value of the user customized function to be added.</param>
        </member>
        <member name="M:AdaptiveExpressions.Expression.FunctionTable.Add(System.Collections.Generic.KeyValuePair{System.String,AdaptiveExpressions.ExpressionEvaluator})">
            <summary>
            Inserts a mapping of a string key to ExpressionEvaluator into FunctionTable from a key value pair.
            </summary>
            <param name="item">A key value pair of string to ExpressionEvaluator.</param>
        </member>
        <member name="M:AdaptiveExpressions.Expression.FunctionTable.Clear">
            <summary>
            Clears the user customized functions.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Expression.FunctionTable.Contains(System.Collections.Generic.KeyValuePair{System.String,AdaptiveExpressions.ExpressionEvaluator})">
            <summary>
            Determines whether FunctionTable contains a given key value pair of string to ExpressionEvaluator.
            </summary>
            <param name="item">A key value pair of string to ExpressionEvaluator.</param>
            <returns>
            A boolean value indicating  whether the key-value pair is in the FunctionTable.
            Retuens True if the key-value pair is contained, otherwise returns False.
            </returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.FunctionTable.ContainsKey(System.String)">
            <summary>
            Determines if the FunctionTable contains a given string key.
            </summary>
            <param name="key">A string key.</param>
            <returns>
            A boolean value indicating  whether the key is in the FunctionTable.
            Retuens True if the key is contained, otherwise returns False.
            </returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.FunctionTable.CopyTo(System.Collections.Generic.KeyValuePair{System.String,AdaptiveExpressions.ExpressionEvaluator}[],System.Int32)">
            <summary>
            Not implemented.
            </summary>
            <param name="array">An array of string values.</param>
            <param name="arrayIndex">An integer of index.</param>
        </member>
        <member name="M:AdaptiveExpressions.Expression.FunctionTable.GetEnumerator">
            <summary>
            Generates an enumerator through all standard functions.
            </summary>
            <returns>An enumerator of standard functions.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.FunctionTable.Remove(System.String)">
            <summary>
            Removes a specified key from user customized functions.
            </summary>
            <param name="key">A string key of function name.</param>
            <returns>A boolean value indicating  whether the key is successfully removed.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.FunctionTable.Remove(System.Collections.Generic.KeyValuePair{System.String,AdaptiveExpressions.ExpressionEvaluator})">
            <summary>
            Removes a specified key value pair from user customized functions.
            </summary>
            <param name="item">A key value pair of string to ExpressionEvaluator.</param>
            <returns>A boolean value indicating  whether the key is successfully removed.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.FunctionTable.TryGetValue(System.String,AdaptiveExpressions.ExpressionEvaluator@)">
            <summary>
            Attempts to get the value associated with the specified key from the FunctionTable.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the object from the FunctionTable
            that has the specified key, or the default value of the type if the operation failed.</param>
            <returns>A boolean value indicating  whether the value is successfully obtained.</returns>
        </member>
        <member name="T:AdaptiveExpressions.ValidateExpressionDelegate">
            <summary>
            Delegate for doing static validation on an expression.
            </summary>
            <remarks>
            Validators can and should throw exceptions if the expression is not valid.
            </remarks>
            <param name="expression">Expression to check.</param>
        </member>
        <member name="T:AdaptiveExpressions.EvaluateExpressionDelegate">
            <summary>
            Delegate to evaluate an expression.
            </summary>
            <remarks>
            Evaluators should verify runtime arguments when appropriate and return an error rather than throw exceptions if possible.
            </remarks>
            <param name="expression">Expression to evaluate.</param>
            <param name="state">Global state information.</param>
            <param name="options">Options for the evaluation.</param>
            <returns>Value and error string that is non-null if there is an error.</returns>
        </member>
        <member name="T:AdaptiveExpressions.EvaluatorLookup">
            <summary>
            Delegate to lookup function information from the type.
            </summary>
            <param name="type">Name to lookup, usually from <see cref="T:AdaptiveExpressions.ExpressionType"/>.</param>
            <returns>Expression evaluation information.</returns>
        </member>
        <member name="T:AdaptiveExpressions.ExpressionEvaluator">
            <summary>
            Information on how to evaluate an expression.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionEvaluator.#ctor(System.String,AdaptiveExpressions.EvaluateExpressionDelegate,AdaptiveExpressions.ReturnType,AdaptiveExpressions.ValidateExpressionDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.ExpressionEvaluator"/> class.
            </summary>
            <param name="type">Expression type.</param>
            <param name="evaluator">Delegate to evaluate an expression.</param>
            <param name="returnType">Type expected from evaluation.</param>
            <param name="validator">Static validation of expression.</param>
        </member>
        <member name="P:AdaptiveExpressions.ExpressionEvaluator.Type">
            <summary>
            Gets the expression type for evaluator.
            </summary>
            <value>
            The type of expression from <see cref="T:AdaptiveExpressions.ExpressionType"/> for built-in functions or else a unique string for custom functions.
            </value>
        </member>
        <member name="P:AdaptiveExpressions.ExpressionEvaluator.ReturnType">
            <summary>
            Gets or sets the expression return type.
            </summary>
            <value>
            Type expected by evaluating the expression.
            </value>
        </member>
        <member name="P:AdaptiveExpressions.ExpressionEvaluator.Negation">
            <summary>
            Gets or sets the evaluator that is a negation of this one.
            </summary>
            <remarks>
            When doing <see cref="M:AdaptiveExpressions.Extensions.PushDownNot(AdaptiveExpressions.Expression)"/> then negations will replace an expression and remove not parent.
            By default no negation is defined and not parent will remain.
            If a negation is defined then this is automatically set as its negation.
            If an evaluator is its own negation, then the negation will be passed through to children.
            </remarks>
            <value>
            The evaluator that is a negation of this one.
            </value>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionEvaluator.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>String value represents the function signature. </returns>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionEvaluator.TryEvaluate(AdaptiveExpressions.Expression,AdaptiveExpressions.Memory.IMemory,AdaptiveExpressions.Options)">
            <summary>
            Evaluate an expression.
            </summary>
            <param name="expression">Expression to evaluate.</param>
            <param name="state">Global state information.</param>
            <param name="options">Options used in the evaluation. </param>
            <returns>Value and error string that is non-null if there is an error.</returns>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionEvaluator.ValidateExpression(AdaptiveExpressions.Expression)">
            <summary>
            Validate an expression.
            </summary>
            <param name="expression">Expression to validate.</param>
        </member>
        <member name="T:AdaptiveExpressions.ExpressionFunctions">
             <summary>
             Definition of default built-in functions for expressions.
             </summary>
             <remarks>
             These functions are largely from WDL https://docs.microsoft.com/en-us/azure/logic-apps/workflow-definition-language-functions-reference
             with a few extensions like infix operators for math, logic and comparisons.
            
             This class also has some methods that are useful to use when defining custom functions.
             You can always construct a <see cref="T:AdaptiveExpressions.ExpressionEvaluator"/> directly which gives the maximum amount of control over validation and evaluation.
             Validators are static checkers that should throw an exception if something is not valid statically.
             Evaluators are called to evaluate an expression and should try not to throw.
             There are some evaluators in this file that take in a verifier that is called at runtime to verify arguments are proper.
             </remarks>
        </member>
        <member name="F:AdaptiveExpressions.ExpressionFunctions.StandardFunctions">
            <summary>
            Read only Dictionary of built in functions.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.Properties.ArrayExpression`1">
            <summary>
            ArrayExpression - represents a property which is either a value of array of T or a string expression to bind to a array of T.
            </summary>
            <typeparam name="T">type of object in the array.</typeparam>
            <remarks>String values are always interpreted as an expression, whether it has '=' prefix or not.</remarks>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ArrayExpression`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.ArrayExpression`1"/> class.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ArrayExpression`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.ArrayExpression`1"/> class.
            </summary>
            <param name="value">collection of (T).</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ArrayExpression`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.ArrayExpression`1"/> class.
            </summary>
            <param name="expression">expression which evaluates to array.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ArrayExpression`1.#ctor(AdaptiveExpressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.ArrayExpression`1"/> class.
            </summary>
            <param name="expression">expression which evaluates to array.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ArrayExpression`1.#ctor(System.Func{System.Object,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.ArrayExpression`1"/> class.
            </summary>
            <param name="lambda">function (data) which evaluates to array.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ArrayExpression`1.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.ArrayExpression`1"/> class.
            </summary>
            <param name="expressionOrValue">JToken which is either a collection of (T) or expression which evaluates to array.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ArrayExpression`1.op_Implicit(`0[])~AdaptiveExpressions.Properties.ArrayExpression{`0}">
            <summary>
            Converts an array to ArrayExpression.
            </summary>
            <param name="value">The array to convert.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ArrayExpression`1.op_Implicit(System.Collections.Generic.List{`0})~AdaptiveExpressions.Properties.ArrayExpression{`0}">
            <summary>
            Converts a list to ArrayExpression.
            </summary>
            <param name="value">The list to convert.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ArrayExpression`1.op_Implicit(System.String)~AdaptiveExpressions.Properties.ArrayExpression{`0}">
            <summary>
            Converts a string to ArrayExpression.
            </summary>
            <param name="expression">The string to convert.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ArrayExpression`1.op_Implicit(AdaptiveExpressions.Expression)~AdaptiveExpressions.Properties.ArrayExpression{`0}">
            <summary>
            Converts an Expression instance to ArrayExpression.
            </summary>
            <param name="expression">The Expression instance to convert.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ArrayExpression`1.op_Implicit(Newtonsoft.Json.Linq.JToken)~AdaptiveExpressions.Properties.ArrayExpression{`0}">
            <summary>
            Converts a JSON Token to ArrayExpression.
            </summary>
            <param name="expressionOrValue">The JSON Token to Convert.</param>
        </member>
        <member name="T:AdaptiveExpressions.Properties.BoolExpression">
            <summary>
            BoolExpression - represents a property which is either a boolean or a string expression which resolves to a boolean.
            </summary>
            <remarks>String values are always interpreted as an expression, whether it has '=' prefix or not.</remarks>
        </member>
        <member name="M:AdaptiveExpressions.Properties.BoolExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.BoolExpression"/> class.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Properties.BoolExpression.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.BoolExpression"/> class.
            </summary>
            <param name="value">bool value.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.BoolExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.BoolExpression"/> class.
            </summary>
            <param name="expression">expression to resolve to bool.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.BoolExpression.#ctor(AdaptiveExpressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.BoolExpression"/> class.
            </summary>
            <param name="expression">expression to resolve to bool.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.BoolExpression.#ctor(System.Func{System.Object,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.BoolExpression"/> class.
            </summary>
            <param name="lambda">function (data) which evaluates to bool.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.BoolExpression.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.BoolExpression"/> class.
            </summary>
            <param name="expressionOrValue">expression or value to resolve to bool.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.BoolExpression.op_Implicit(System.Boolean)~AdaptiveExpressions.Properties.BoolExpression">
            <summary>
            Converts a boolean value to a BoolExpression.
            </summary>
            <param name="value">The boolean value to convert.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.BoolExpression.op_Implicit(System.String)~AdaptiveExpressions.Properties.BoolExpression">
            <summary>
            Converts a string value to a BoolExpression.
            </summary>
            <param name="expression">The string value to convert.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.BoolExpression.op_Implicit(AdaptiveExpressions.Expression)~AdaptiveExpressions.Properties.BoolExpression">
            <summary>
            Converts an Expression instance to BoolExpression.
            </summary>
            <param name="expression">The Expression instance to convert.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.BoolExpression.op_Implicit(Newtonsoft.Json.Linq.JToken)~AdaptiveExpressions.Properties.BoolExpression">
            <summary>
            Converts a JSON Token to BoolExpression.
            </summary>
            <param name="expressionOrValue">The JSON Token to Convert.</param>
        </member>
        <member name="T:AdaptiveExpressions.Properties.EnumExpression`1">
            <summary>
            EnumExpression - represents a property which is either a enum(T) or a string expression which resolves to a enum(T).
            </summary>
            <typeparam name="T">type of enum.</typeparam>
            <remarks>String values are always interpreted as an enum, unless it has '=' prefix in which case it is evaluated as a expression.</remarks>
        </member>
        <member name="M:AdaptiveExpressions.Properties.EnumExpression`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.EnumExpression`1"/> class.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Properties.EnumExpression`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.EnumExpression`1"/> class.
            </summary>
            <param name="value">value of T.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.EnumExpression`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.EnumExpression`1"/> class.
            </summary>
            <param name="expression">expression to resolve to an enum.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.EnumExpression`1.#ctor(AdaptiveExpressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.EnumExpression`1"/> class.
            </summary>
            <param name="expression">expression to resolve to an enum.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.EnumExpression`1.#ctor(System.Func{System.Object,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.EnumExpression`1"/> class.
            </summary>
            <param name="lambda">function (data) which evaluates to enum.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.EnumExpression`1.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.EnumExpression`1"/> class.
            </summary>
            <param name="expressionOrValue">jtoken value to resolve to an enum.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.EnumExpression`1.op_Implicit(`0)~AdaptiveExpressions.Properties.EnumExpression{`0}">
            <summary>
            Converts a value to an EnumExpression instance.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.EnumExpression`1.op_Implicit(System.String)~AdaptiveExpressions.Properties.EnumExpression{`0}">
            <summary>
            Converts a string value to an EnumExpression instance.
            </summary>
            <param name="expressionOrValue">The string value.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.EnumExpression`1.op_Implicit(AdaptiveExpressions.Expression)~AdaptiveExpressions.Properties.EnumExpression{`0}">
            <summary>
            Converts an Expression instance to an EnumExpression instance.
            </summary>
            <param name="expression">The Expression instance.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.EnumExpression`1.op_Implicit(Newtonsoft.Json.Linq.JToken)~AdaptiveExpressions.Properties.EnumExpression{`0}">
            <summary>
            Converts a JSON Token to an EnumExpression instance.
            </summary>
            <param name="value">The JSON Token to convert.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.EnumExpression`1.SetValue(System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="T:AdaptiveExpressions.Properties.ExpressionProperty`1">
            <summary>
            Base class which defines a Expression or value for a property.
            </summary>
            <typeparam name="T">type of object the expression should evaluate to.</typeparam>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ExpressionProperty`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.ExpressionProperty`1"/> class.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ExpressionProperty`1.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.ExpressionProperty`1"/> class.
            </summary>
            <param name="value">An object containing the value to be set.</param>
        </member>
        <member name="P:AdaptiveExpressions.Properties.ExpressionProperty`1.Value">
            <summary>
            Gets or sets the raw value of the expression property.
            </summary>
            <value>
            The value to return when someone calls GetValue().
            </value>
        </member>
        <member name="P:AdaptiveExpressions.Properties.ExpressionProperty`1.ExpressionText">
            <summary>
            Gets or sets the expression text to evaluate to get the value.
            </summary>
            <value>
            The expression text.
            </value>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ExpressionProperty`1.op_Implicit(`0)~AdaptiveExpressions.Properties.ExpressionProperty{`0}">
            <summary>
            Converts a value to an ExpressionProperty instance.
            </summary>
            <param name="value">A value to convert.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ExpressionProperty`1.op_Implicit(System.String)~AdaptiveExpressions.Properties.ExpressionProperty{`0}">
            <summary>
            Converts a string value to an ExpressionProperty instance.
            </summary>
            <param name="expression">The string value to convert.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ExpressionProperty`1.op_Implicit(AdaptiveExpressions.Expression)~AdaptiveExpressions.Properties.ExpressionProperty{`0}">
            <summary>
            Converts an Expression instance to an ExpressionProperty instance.
            </summary>
            <param name="expression">The Expression instance to convert.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ExpressionProperty`1.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string value.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ExpressionProperty`1.ToExpression">
            <summary>
            This will return the existing expression or ConstantExpression(Value) if the value is non-complex type.
            </summary>
            <returns>expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ExpressionProperty`1.GetValue(System.Object)">
            <summary>
            Get the value.
            </summary>
            <param name="data">data to use for expression binding.</param>
            <returns>Value or default(T) if not found.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ExpressionProperty`1.TryGetValue(System.Object)">
            <summary>
            Try to Get the value.
            </summary>
            <param name="data">data to use for expression binding.</param>
            <returns>value.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ExpressionProperty`1.SetValue(System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ExpressionProperty`1.GetObject(System.Object)">
            <summary>
            Get value as object.
            </summary>
            <remarks>Helper methods which allows you to work with the expression property values as purely objects.</remarks>
            <param name="data">data to bind to.</param>
            <returns>value as object.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ExpressionProperty`1.TryGetObject(System.Object)">
            <summary>
            Try Get value as object.
            </summary>
            <remarks>Helper methods which allows you to work with the expression property values as purely objects.</remarks>
            <param name="data">data.</param>
            <returns>Value and error.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ExpressionProperty`1.SetObject(System.Object)">
            <summary>
            Set value as object.
            </summary>
            <param name="value">object.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ExpressionProperty`1.ConvertObject(System.Object)">
            <summary>
            Convert raw object to desired value type.
            </summary>
            <remarks>
            This method is called whenever an object is fected via expression or is deserialized from raw text.
            </remarks>
            <param name="result">result to convert to object of type T.</param>
            <returns>object of type T.</returns>
        </member>
        <member name="T:AdaptiveExpressions.Properties.IExpressionProperty">
            <summary>
            Interface which defines plain object access to the values of an ExpressionProperty.
            </summary>
            <remarks>    
            This interface definition allows reflection to work with ExpressionProperty{T} without having to know the generic parameter type.
            </remarks>
        </member>
        <member name="M:AdaptiveExpressions.Properties.IExpressionProperty.GetObject(System.Object)">
            <summary>
            Get value as object.
            </summary>
            <remarks>Helper methods which allows you to work with the expression property values as purely objects.</remarks>
            <param name="data">data to bind to.</param>
            <returns>value as object.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Properties.IExpressionProperty.TryGetObject(System.Object)">
            <summary>
            Try Get value as object.
            </summary>
            <remarks>Helper methods which allows you to work with the expression property values as purely objects.</remarks>
            <param name="data">data.</param>
            <returns>Value and error.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Properties.IExpressionProperty.SetObject(System.Object)">
            <summary>
            Set value as object.
            </summary>
            <param name="value">object.</param>
        </member>
        <member name="T:AdaptiveExpressions.Properties.IntExpression">
            <summary>
            IntExpression - represents a property which is either an Integer or a string expression which resolves to a Integer.
            </summary>
            <remarks>String values are always interpreted as an expression, whether it has '=' prefix or not.</remarks>
        </member>
        <member name="M:AdaptiveExpressions.Properties.IntExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.IntExpression"/> class.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Properties.IntExpression.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.IntExpression"/> class.
            </summary>
            <param name="value">value to return.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.IntExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.IntExpression"/> class.
            </summary>
            <param name="expression">string expression to resolve to an int.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.IntExpression.#ctor(AdaptiveExpressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.IntExpression"/> class.
            </summary>
            <param name="expression">expression to resolve to an int.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.IntExpression.#ctor(System.Func{System.Object,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.IntExpression"/> class.
            </summary>
            <param name="lambda">function (data) which evaluates to int.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.IntExpression.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.IntExpression"/> class.
            </summary>
            <param name="expressionOrValue">JToken to resolve to an int.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.IntExpression.op_Implicit(System.Int32)~AdaptiveExpressions.Properties.IntExpression">
            <summary>
            Converts an integer value to an IntExpression instance.
            </summary>
            <param name="value">The integer value to convert.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.IntExpression.op_Implicit(System.String)~AdaptiveExpressions.Properties.IntExpression">
            <summary>
            Converts a string value to an IntExpression instance.
            </summary>
            <param name="expression">The string value to convert.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.IntExpression.op_Implicit(AdaptiveExpressions.Expression)~AdaptiveExpressions.Properties.IntExpression">
            <summary>
            Converts an Expression instance to an IntExpression instance.
            </summary>
            <param name="expression">The Expression instance to convert.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.IntExpression.op_Implicit(Newtonsoft.Json.Linq.JToken)~AdaptiveExpressions.Properties.IntExpression">
            <summary>
            Converts a JSON Token to an IntExpression instance.
            </summary>
            <param name="expressionOrValue">The JSON Token to convert.</param>
        </member>
        <member name="T:AdaptiveExpressions.Properties.NumberExpression">
            <summary>
            NumberExpression - represents a property which is either a float or a string expression which resolves to a float.
            </summary>
            <remarks>String values are always interpreted as an expression, whether it has '=' prefix or not.</remarks>
        </member>
        <member name="M:AdaptiveExpressions.Properties.NumberExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.NumberExpression"/> class.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Properties.NumberExpression.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.NumberExpression"/> class.
            </summary>
            <param name="value">value to use.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.NumberExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.NumberExpression"/> class.
            </summary>
            <param name="expression">string to interpret as expression or number.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.NumberExpression.#ctor(AdaptiveExpressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.NumberExpression"/> class.
            </summary>
            <param name="expression">expression.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.NumberExpression.#ctor(System.Func{System.Object,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.NumberExpression"/> class.
            </summary>
            <param name="lambda">expression.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.NumberExpression.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.NumberExpression"/> class.
            </summary>
            <param name="expressionOrValue">jtoken to interpret as expression or number.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.NumberExpression.op_Implicit(System.Single)~AdaptiveExpressions.Properties.NumberExpression">
            <summary>
            Converts a floating point number value to a NumberExpression instance.
            </summary>
            <param name="value">The floating point number number to convert.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.NumberExpression.op_Implicit(System.String)~AdaptiveExpressions.Properties.NumberExpression">
            <summary>
            Converts a string value to a NumberExpression instance.
            </summary>
            <param name="expression">The string value to convert.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.NumberExpression.op_Implicit(AdaptiveExpressions.Expression)~AdaptiveExpressions.Properties.NumberExpression">
            <summary>
            Converts an Expression instance to a NumberExpression instance.
            </summary>
            <param name="expression">The Expression instance to convert.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.NumberExpression.op_Implicit(Newtonsoft.Json.Linq.JToken)~AdaptiveExpressions.Properties.NumberExpression">
            <summary>
            Converts a JSON Token to an NumberExpression instance.
            </summary>
            <param name="expressionOrValue">The JSON Token to convert.</param>
        </member>
        <member name="T:AdaptiveExpressions.Properties.ObjectExpression`1">
            <summary>
            ObjectExpression(T) - represents a property which is either an object of type T or a string expression which resolves to a object of type T.
            </summary>
            <typeparam name="T">the type of object.</typeparam>
            <remarks>String values are always interpreted as an expression, whether it has '=' prefix or not.</remarks>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ObjectExpression`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.ObjectExpression`1"/> class.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ObjectExpression`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.ObjectExpression`1"/> class.
            </summary>
            <param name="value">value.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ObjectExpression`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.ObjectExpression`1"/> class.
            </summary>
            <param name="expressionOrString">expression or string.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ObjectExpression`1.#ctor(AdaptiveExpressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.ObjectExpression`1"/> class.
            </summary>
            <param name="expression">expression.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ObjectExpression`1.#ctor(System.Func{System.Object,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.ObjectExpression`1"/> class.
            </summary>
            <param name="lambda">function (data) which evaluates to object.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ObjectExpression`1.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.ObjectExpression`1"/> class.
            </summary>
            <param name="expressionOrValue">expression or value.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ObjectExpression`1.op_Implicit(`0)~AdaptiveExpressions.Properties.ObjectExpression{`0}">
            <summary>
            Converts a value to an ObjectExpression instance.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ObjectExpression`1.op_Implicit(System.String)~AdaptiveExpressions.Properties.ObjectExpression{`0}">
            <summary>
            Converts a string value to an ObjectExpression instance.
            </summary>
            <param name="expressionOrString">A string value to convert.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ObjectExpression`1.op_Implicit(AdaptiveExpressions.Expression)~AdaptiveExpressions.Properties.ObjectExpression{`0}">
            <summary>
            Converts an Expression instance to an ObjectExpression instance.
            </summary>
            <param name="expression">The Expression instance to convert.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ObjectExpression`1.op_Implicit(Newtonsoft.Json.Linq.JToken)~AdaptiveExpressions.Properties.ObjectExpression{`0}">
            <summary>
            Converts a JSON Token to an ObjectExpression instance.
            </summary>
            <param name="expressionOrvalue">The JSON Token to convert.</param>
        </member>
        <member name="T:AdaptiveExpressions.Properties.StringExpression">
            <summary>
            StringExpression - represents a property which is either a string value or a string expression.
            </summary>
            <remarks>
            If the value is 
            * a string with '=' prefix then the string is treated as an expression to resolve to a string. 
            * a string without '=' then value is treated as string with string interpolation.
            * You can escape the '=' prefix by putting a backslash.  
            Examples: 
                prop = "Hello ${user.name}" => "Hello Joe"
                prop = "=length(user.name)" => "3"
                prop = "=user.name" => "Joe"
                prop = "\=user" => "=user".
            </remarks>
        </member>
        <member name="M:AdaptiveExpressions.Properties.StringExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.StringExpression"/> class.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Properties.StringExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.StringExpression"/> class.
            </summary>
            <param name="expressionOrValue">string to interpret as string or expression to a string.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.StringExpression.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.StringExpression"/> class.
            </summary>
            <param name="expressionOrValue">value to interpret as a string or expression to a string.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.StringExpression.#ctor(AdaptiveExpressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.StringExpression"/> class.
            </summary>
            <param name="expression">expression to a string.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.StringExpression.#ctor(System.Func{System.Object,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.StringExpression"/> class.
            </summary>
            <param name="lambda">function (data) which evaluates to string.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.StringExpression.op_Implicit(System.String)~AdaptiveExpressions.Properties.StringExpression">
            <summary>
            Converts a string value to a StringExpression instance.
            </summary>
            <param name="valueOrExpression">The string value to convert.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.StringExpression.op_Implicit(Newtonsoft.Json.Linq.JToken)~AdaptiveExpressions.Properties.StringExpression">
            <summary>
            Converts a JSON Token to a StringExpression instance.
            </summary>
            <param name="valueOrExpression">The JSON Token to convert.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.StringExpression.op_Implicit(AdaptiveExpressions.Expression)~AdaptiveExpressions.Properties.StringExpression">
            <summary>
            Converts an Expression instance to a StringExpression instance.
            </summary>
            <param name="expression">The Expression instance to convert.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.StringExpression.SetValue(System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="T:AdaptiveExpressions.Properties.ValueExpression">
            <summary>
            ValueExpression - represents a property which is an object of any kind or a string expression.
            </summary>
            <remarks>
            If the value is 
            * a string with '=' prefix then the string is treated as an expression to resolve to a string. 
            * a string without '=' then value is treated as string with string interpolation.
            * any other type, then it is of that type (int, bool, object, etc.)
            You can escape the '=' prefix by putting a backslash.  
            Examples: 
                prop = true ==> true
                prop = "Hello ${user.name}" => "Hello Joe"
                prop = "=length(user.name)" => 3
                prop = "=user.age" => 45.
                prop = "\=user.age" => "=user.age".
            </remarks>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ValueExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.ValueExpression"/> class.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ValueExpression.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.ValueExpression"/> class.
            </summary>
            <param name="value">value to interpret as object or string expression.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ValueExpression.#ctor(System.Func{System.Object,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.ValueExpression"/> class.
            </summary>
            <param name="lambda">function (data) which evaluates to value.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ValueExpression.op_Implicit(System.String)~AdaptiveExpressions.Properties.ValueExpression">
            <summary>
            Converts a string value to a ValueExpression instance.
            </summary>
            <param name="valueOrExpression">A string value to convert.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ValueExpression.op_Implicit(System.Int32)~AdaptiveExpressions.Properties.ValueExpression">
            <summary>
            Converts an integer value to a ValueExpression instance.
            </summary>
            <param name="value">The integer value to convert.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ValueExpression.op_Implicit(System.Int64)~AdaptiveExpressions.Properties.ValueExpression">
            <summary>
            Converts a long integer value to a ValueExpression instance.
            </summary>
            <param name="value">The long integer value to convert.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ValueExpression.op_Implicit(System.Single)~AdaptiveExpressions.Properties.ValueExpression">
            <summary>
            Converts a floating point number value to a ValueExpression instance.
            </summary>
            <param name="value">The floating ponit number value to convert.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ValueExpression.op_Implicit(System.Double)~AdaptiveExpressions.Properties.ValueExpression">
            <summary>
            Converts a double precision floating number value to a ValueExpression instance.
            </summary>
            <param name="value">The double precision floating number value to convert.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ValueExpression.op_Implicit(System.DateTime)~AdaptiveExpressions.Properties.ValueExpression">
            <summary>
            Converts a DateTime value to a ValueExpression instance.
            </summary>
            <param name="value">The DateTime value to convert.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ValueExpression.op_Implicit(System.Boolean)~AdaptiveExpressions.Properties.ValueExpression">
            <summary>
            Converts a boolean value to a ValueExpression instance.
            </summary>
            <param name="value">The boolean value to convert.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ValueExpression.op_Implicit(Newtonsoft.Json.Linq.JToken)~AdaptiveExpressions.Properties.ValueExpression">
            <summary>
            Converts a JSON Token to a ValueExpression instance.
            </summary>
            <param name="valueOrExpression">The JSON Token to convert.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ValueExpression.op_Implicit(AdaptiveExpressions.Expression)~AdaptiveExpressions.Properties.ValueExpression">
            <summary>
            Converts an Expression instance to a ValueExpression instance.
            </summary>
            <param name="expression">The Expression instance to convert.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ValueExpression.SetValue(System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="T:AdaptiveExpressions.ExpressionType">
            <summary>
            Built-in expression types.
            </summary>
        </member>
        <member name="F:AdaptiveExpressions.ExpressionType.Optional">
            <summary>
            Mark a sub-expression as optional.
            </summary>
            <remarks>
            When an expression is being processed, optional creates a disjunction where the expression is both included and not
            included with the rest of the expression.  This is a simple way to express this common relationship.  By generating
            both clauses then matching the expression can be more specific when the optional expression is true.
            </remarks>
        </member>
        <member name="F:AdaptiveExpressions.ExpressionType.Ignore">
            <summary>
            Any predicate expression wrapped in this will be ignored for specialization.
            </summary>
            <remarks>
            This is useful for when you need to add expression to the trigger that are part of rule mechanics rather than of intent.
            For example, if you have a counter for how often a particular message is displayed, then that is part of the triggering condition, 
            but all such rules would be incomparable because they counter is per-rule. 
            </remarks>
        </member>
        <member name="T:AdaptiveExpressions.Extensions">
            <summary>
            Extension methods for detecting or value testing of various types.
            </summary>
            <summary>
            Extension methods for manipulation of <see cref="T:AdaptiveExpressions.Expression"/> values.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Extensions.IsNumber(System.Object)">
            <summary>
            Test an object to see if it is a numeric type.
            </summary>
            <param name="value">Value to check.</param>
            <returns>True if numeric type.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Extensions.IsInteger(System.Object)">
            <summary>
            Test an object to see if it is an integer type.
            </summary>
            <param name="value">Value to check.</param>
            <returns>True if numeric type.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Extensions.RandomNext(AdaptiveExpressions.Memory.IMemory,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Generator random seed and value from properties.
            If value is not null, the mock random value result would be: min + (value % (max - min)).
            Else if seed is not null, the seed of the random would be fixed.
            </summary>
            <param name="memory">memory state.</param>
            <param name="min">The inclusive lower bound of the random number returned.</param>
            <param name="max">The exclusive upper bound of the random number returned. max must be greater than or equal to min.</param>
            <param name="seed">user seed.</param>
            <returns>Random seed and value.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Extensions.PushDownNot(AdaptiveExpressions.Expression)">
            <summary>
            Rewrite the expression by pushing not down to the leaves.
            </summary>
            <remarks>
            Push down not to the leaves if possible.  For and/or/not this uses DeMorgan's law and rewrites comparisons.
            You can define your own behavior by setting <see cref="P:AdaptiveExpressions.ExpressionEvaluator.Negation"/> to the negated evaluator.
            </remarks>
            <param name="expression">Expression to rewrite.</param>
            <returns>Rewritten expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Extensions.DisjunctiveNormalForm(AdaptiveExpressions.Expression)">
            <summary>
            Rewrite expression into disjunctive normal form.
            </summary>
            <remarks>
            Rewrites to either a simple expression or a disjunction of conjunctions or simple expressions with not pushed down
            to leaves.
            </remarks>
            <param name="expression">Expression to rewrite.</param>
            <returns>Normalized expression.</returns>
        </member>
        <member name="T:AdaptiveExpressions.FunctionUtils">
            <summary>
            Utility functions for Adaptive-Expressions.
            </summary>
        </member>
        <member name="F:AdaptiveExpressions.FunctionUtils.DefaultDateTimeFormat">
            <summary>
            The default date time format string.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.FunctionUtils.VerifyExpression">
            <summary>
            Verify the result of an expression is of the appropriate type and return a string if not.
            </summary>
            <param name="value">Value to verify.</param>
            <param name="expression">Expression that produced value.</param>
            <param name="child">Index of child expression.</param>
            <returns>Null if value if correct or error string otherwise.</returns>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.ValidateArityAndAnyType(AdaptiveExpressions.Expression,System.Int32,System.Int32,AdaptiveExpressions.ReturnType)">
            <summary>
            Validate that expression has a certain number of children that are of any of the supported types.
            </summary>
            <remarks>
            If a child has a return type of Object then validation will happen at runtime.</remarks>
            <param name="expression">Expression to validate.</param>
            <param name="minArity">Minimum number of children.</param>
            <param name="maxArity">Maximum number of children.</param>
            <param name="returnType">Allowed return types for children.</param>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.ValidateOrder(AdaptiveExpressions.Expression,AdaptiveExpressions.ReturnType[],AdaptiveExpressions.ReturnType[])">
            <summary>
            Validate the number and type of arguments to a function.
            </summary>
            <param name="expression">Expression to validate.</param>
            <param name="optional">Optional types in order.</param>
            <param name="types">Expected types in order.</param>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.ValidateAtLeastOne(AdaptiveExpressions.Expression)">
            <summary>
            Validate at least 1 argument of any type.
            </summary>
            <param name="expression">Expression to validate.</param>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.ValidateNumber(AdaptiveExpressions.Expression)">
            <summary>
            Validate 1 or more numeric arguments.
            </summary>
            <param name="expression">Expression to validate.</param>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.ValidateString(AdaptiveExpressions.Expression)">
            <summary>
            Validate 1 or more string arguments.
            </summary>
            <param name="expression">Expression to validate.</param>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.ValidateBinary(AdaptiveExpressions.Expression)">
            <summary>
            Validate there are two children.
            </summary>
            <param name="expression">Expression to validate.</param>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.ValidateBinaryNumber(AdaptiveExpressions.Expression)">
            <summary>
            Validate 2 numeric arguments.
            </summary>
            <param name="expression">Expression to validate.</param>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.ValidateUnaryOrBinaryNumber(AdaptiveExpressions.Expression)">
            <summary>
            Validate 1 or 2 numeric arguments.
            </summary>
            <param name="expression">Expression to validate.</param>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.ValidateTwoOrMoreThanTwoNumbers(AdaptiveExpressions.Expression)">
            <summary>
            Validate 2 or more than 2 numeric arguments.
            </summary>
            <param name="expression">Expression to validate.</param>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.ValidateBinaryNumberOrString(AdaptiveExpressions.Expression)">
            <summary>
            Validate there are 2 numeric or string arguments.
            </summary>
            <param name="expression">Expression to validate.</param>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.ValidateUnary(AdaptiveExpressions.Expression)">
            <summary>
            Validate there is a single argument.
            </summary>
            <param name="expression">Expression to validate.</param>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.ValidateUnaryString(AdaptiveExpressions.Expression)">
            <summary>
            Validate there is a single string argument.
            </summary>
            <param name="expression">Expression to validate.</param>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.ValidateUnaryOrBinaryString(AdaptiveExpressions.Expression)">
            <summary>
            Validate 1 or 2 string arguments.
            </summary>
            <param name="expression">Expression to validate.</param>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.ValidateUnaryNumber(AdaptiveExpressions.Expression)">
            <summary>
            Validate there is a single number argument.
            </summary>
            <param name="expression">Expression to validate.</param>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.ValidateUnaryBoolean(AdaptiveExpressions.Expression)">
            <summary>
            Validate there is a single boolean argument.
            </summary>
            <param name="expression">Expression to validate.</param>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.VerifyNumber(System.Object,AdaptiveExpressions.Expression,System.Int32)">
            <summary>
            Verify value is numeric.
            </summary>
            <param name="value">Value to check.</param>
            <param name="expression">Expression that led to value.</param>
            <param name="number">No function.</param>
            <returns>Error or null if valid.</returns>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.VerifyNumericList(System.Object,AdaptiveExpressions.Expression,System.Int32)">
            <summary>
            Verify value is numeric list.
            </summary>
            <param name="value">Value to check.</param>
            <param name="expression">Expression that led to value.</param>
            <param name="number">No function.</param>
            <returns>Error or null if valid.</returns>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.VerifyNumericListOrNumber(System.Object,AdaptiveExpressions.Expression,System.Int32)">
            <summary>
            Verify value is a numeric list or a numeric value.
            </summary>
            <param name="value">Value to check.</param>
            <param name="expression">Expression that led to value.</param>
            <param name="number">No function.</param>
            <returns>Error or null if valid.</returns>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.VerifyContainer(System.Object,AdaptiveExpressions.Expression,System.Int32)">
            <summary>
            Verify value contains elements.
            </summary>
            <param name="value">Value to check.</param>
            <param name="expression">Expression that led to value.</param>
            <param name="number">No function.</param>
            <returns>Error or null if valid.</returns>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.VerifyList(System.Object,AdaptiveExpressions.Expression,System.Int32)">
            <summary>
            Verify value contains elements.
            </summary>
            <param name="value">Value to check.</param>
            <param name="expression">Expression that led to value.</param>
            <param name="number">No function.</param>
            <returns>Error or null if valid.</returns>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.TryParseList(System.Object,System.Collections.IList@)">
            <summary>
            Try to coerce object to IList.
            </summary>
            <param name="value">Value to coerce.</param>
            <param name="list">IList if found.</param>
            <returns>true if found IList.</returns>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.VerifyInteger(System.Object,AdaptiveExpressions.Expression,System.Int32)">
            <summary>
            Verify value is an integer.
            </summary>
            <param name="value">Value to check.</param>
            <param name="expression">Expression that led to value.</param>
            <param name="number">No function.</param>
            <returns>Error or null if valid.</returns>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.VerifyString(System.Object,AdaptiveExpressions.Expression,System.Int32)">
            <summary>
            Verify value is a string.
            </summary>
            <param name="value">Value to check.</param>
            <param name="expression">Expression that led to value.</param>
            <param name="number">No function.</param>
            <returns>Error or null if valid.</returns>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.VerifyStringOrNull(System.Object,AdaptiveExpressions.Expression,System.Int32)">
            <summary>
            Verify an object is neither a string nor null.
            </summary>
            <param name="value">instance.</param>
            <param name="expression">expression.</param>
            <param name="number">number.</param>
            <returns>error message.</returns>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.VerifyNotNull(System.Object,AdaptiveExpressions.Expression,System.Int32)">
            <summary>
            Verify value is not null.
            </summary>
            <param name="value">Value to check.</param>
            <param name="expression">Expression that led to value.</param>
            <param name="number">No function.</param>
            <returns>Error or null if valid.</returns>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.VerifyNumberOrString(System.Object,AdaptiveExpressions.Expression,System.Int32)">
            <summary>
            Verify value is a number or string.
            </summary>
            <param name="value">Value to check.</param>
            <param name="expression">Expression that led to value.</param>
            <param name="number">No function.</param>
            <returns>Error or null if valid.</returns>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.VerifyNumberOrStringOrNull(System.Object,AdaptiveExpressions.Expression,System.Int32)">
            <summary>
            Verify value is a number or string or null.
            </summary>
            <param name="value">Value to check.</param>
            <param name="expression">Expression that led to value.</param>
            <param name="number">No function.</param>
            <returns>Error.</returns>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.EvaluateChildren(AdaptiveExpressions.Expression,AdaptiveExpressions.Memory.IMemory,AdaptiveExpressions.Options,AdaptiveExpressions.FunctionUtils.VerifyExpression)">
            <summary>
            Evaluate expression children and return them.
            </summary>
            <param name="expression">Expression with children.</param>
            <param name="state">Global state.</param>
            <param name="options">Options used in evaluation. </param>
            <param name="verify">Optional function to verify each child's result.</param>
            <returns>List of child values or error message.</returns>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.Apply(System.Func{System.Collections.Generic.IReadOnlyList{System.Object},System.Object},AdaptiveExpressions.FunctionUtils.VerifyExpression)">
            <summary>
            Generate an expression delegate that applies function after verifying all children.
            </summary>
            <param name="function">Function to apply.</param>
            <param name="verify">Function to check each arg for validity.</param>
            <returns>Delegate for evaluating an expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.ApplyWithError(System.Func{System.Collections.Generic.IReadOnlyList{System.Object},System.ValueTuple{System.Object,System.String}},AdaptiveExpressions.FunctionUtils.VerifyExpression)">
            <summary>
            Generate an expression delegate that applies function after verifying all children.
            </summary>
            <param name="function">Function to apply.</param>
            <param name="verify">Function to check each arg for validity.</param>
            <returns>Delegate for evaluating an expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.ApplyWithOptionsAndError(System.Func{System.Collections.Generic.IReadOnlyList{System.Object},AdaptiveExpressions.Options,System.ValueTuple{System.Object,System.String}},AdaptiveExpressions.FunctionUtils.VerifyExpression)">
            <summary>
            Generate an expression delegate that applies function after verifying all children.
            </summary>
            <param name="function">Function to apply.</param>
            <param name="verify">Function to check each arg for validity.</param>
            <returns>Delegate for evaluating an expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.ApplySequence(System.Func{System.Collections.Generic.IReadOnlyList{System.Object},System.Object},AdaptiveExpressions.FunctionUtils.VerifyExpression)">
            <summary>
            Generate an expression delegate that applies function on the accumulated value after verifying all children.
            </summary>
            <param name="function">Function to apply.</param>
            <param name="verify">Function to check each arg for validity.</param>
            <returns>Delegate for evaluating an expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.ApplySequenceWithError(System.Func{System.Collections.Generic.IReadOnlyList{System.Object},System.ValueTuple{System.Object,System.String}},AdaptiveExpressions.FunctionUtils.VerifyExpression)">
            <summary>
            Generate an expression delegate that applies function on the accumulated value after verifying all children.
            </summary>
            <param name="function">Function to apply.</param>
            <param name="verify">Function to check each arg for validity.</param>
            <returns>Delegate for evaluating an expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.TryAccumulatePath(AdaptiveExpressions.Expression,AdaptiveExpressions.Memory.IMemory,AdaptiveExpressions.Options)">
            <summary>
            Try to accumulate the path from an Accessor or Element, from right to left.
            </summary>
            <param name="expression">expression.</param>
            <param name="state">scope.</param>
            <param name="options">Options used in evaluation. </param>
            <returns>return the accumulated path and the expression left unable to accumulate.</returns>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.AccessIndex(System.Object,System.Int64)">
            <summary>
            Lookup an index property of instance.
            </summary>
            <param name="instance">Instance with property.</param>
            <param name="index">Property to lookup.</param>
            <returns>Value and error information if any.</returns>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.TryAccessProperty(System.Object,System.String,System.Object@)">
            <summary>
            Lookup a property in IDictionary, JObject or through reflection.
            </summary>
            <param name="instance">Instance with property.</param>
            <param name="property">Property to lookup.</param>
            <param name="value">Value of property.</param>
            <returns>True if property is present and binds value.</returns>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.ParseInt32(System.Object)">
            <summary>
            Convert an input object to 32-bit signed interger. If failed, an error messgage will returned.
            </summary>
            <param name="obj">Input object.</param>
            <returns>A tuple of an integer and a string.</returns>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.ResolveValue(System.Object)">
            <summary>
            Convert constant JValue to base type value.
            </summary>
            <param name="obj">Input object.</param>
            <returns>Corresponding base type if input is a JValue.</returns>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.ResolveListValue(System.Object)">
            <summary>
            Return new object list replace jarray.ToArray&lt;object&gt;().
            </summary>
            <param name="instance">List to resolve.</param>
            <returns>Resolved list.</returns>
        </member>
        <member name="M:AdaptiveExpressions.FunctionUtils.IsLogicTrue(System.Object)">
            <summary>
            Test result to see if True in logical comparison functions.
            </summary>
            <param name="instance">Computed value.</param>
            <returns>True if boolean true or non-null.</returns>
        </member>
        <member name="T:AdaptiveExpressions.IExpressionParser">
            <summary>
            Interface to parse a string into an <see cref="T:AdaptiveExpressions.Expression"/>.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.IExpressionParser.Parse(System.String)">
            <summary>
            Parse a string into an <see cref="T:AdaptiveExpressions.Expression"/>.
            </summary>
            <param name="expression">Expression to parse.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="T:AdaptiveExpressions.LRUCache`2">
            <summary>
            A least-recently-used cache stored like a dictionary.
            </summary>
            <typeparam name="TKey">The type of the key to the cached item.</typeparam>
            <typeparam name="TValue">The type of the cached item.</typeparam>
        </member>
        <member name="F:AdaptiveExpressions.LRUCache`2.DefaultCapacity">
            <summary>
            Default maximum number of elements to cache.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.LRUCache`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.LRUCache`2"/> class.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.LRUCache`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.LRUCache`2"/> class.
            </summary>
            <param name="capacity">Maximum number of elements to cache.</param>
        </member>
        <member name="M:AdaptiveExpressions.LRUCache`2.TryGet(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with
            the specified key, if the key is found; otherwise, the default value for the 
            type of the <paramref name="value" /> parameter.</param>
            <returns>true if contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:AdaptiveExpressions.LRUCache`2.Set(`0,`1)">
            <summary>
            Adds the specified key and value to the cache.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add.</param>
        </member>
        <member name="T:AdaptiveExpressions.Memory.IMemory">
            <summary>
            Memory interface.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Memory.IMemory.SetValue(System.String,System.Object)">
            <summary>
            Set value to a given path.
            </summary>
            <param name="path">memory path.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:AdaptiveExpressions.Memory.IMemory.TryGetValue(System.String,System.Object@)">
            <summary>
            Try get value from a given path, it can be a simple identifier like "a", or
            a combined path like "a.b", "a.b[2]", "a.b[2].c", inside [] is guaranteed to be a int number or a string.
            </summary>
            <param name="path">memory path.</param>
            <param name="value">resolved value.</param>
            <returns> true if the memory contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Memory.IMemory.Version">
            <summary>
            Version is used to identify whether the a particular memory instance has been updated or not.
            If version is not changed, the caller may choose to use the cached result instead of recomputing everything.
            </summary>
            <returns>A string indicates the version.</returns>
        </member>
        <member name="T:AdaptiveExpressions.Memory.MemoryFactory">
            <summary>
            Memory Factory for creating an object that implements IMemory interface.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Memory.MemoryFactory.Create(System.Object)">
            <summary>
            Get an appropriate IMemory implementation for an object.
            </summary>
            <param name="obj">Common object.</param>
            <returns>IMemory.</returns>
        </member>
        <member name="T:AdaptiveExpressions.Memory.ReflectionMemory">
            <summary>
            Internal class to duck type IMemory interface via reflection.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.Memory.SimpleObjectMemory">
            <summary>
            Simple implement of <see cref="T:AdaptiveExpressions.Memory.IMemory"/>.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Memory.SimpleObjectMemory.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Memory.SimpleObjectMemory"/> class.
            This wraps a simple object as IMemory.
            </summary>
            <param name="memory">The object to wrap.</param>
        </member>
        <member name="M:AdaptiveExpressions.Memory.SimpleObjectMemory.TryGetValue(System.String,System.Object@)">
            <summary>
            Try get value from a given path.
            </summary>
            <param name="path">Given path.</param>
            <param name="value">Resolved value.</param>
            <returns>True if the memory contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Memory.SimpleObjectMemory.SetValue(System.String,System.Object)">
            <summary>
            Set value to a given path.
            </summary>
            <param name="path">Memory path.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:AdaptiveExpressions.Memory.SimpleObjectMemory.Version">
            <summary>
            Return the version info of SimpleObjectMemory.
            </summary>
            <returns>A string value.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Memory.SimpleObjectMemory.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string value.</returns>
        </member>
        <member name="T:AdaptiveExpressions.Memory.StackedMemory">
            <summary>
            Stack implements of <see cref="T:AdaptiveExpressions.Memory.IMemory"/>.
            Memory variables have a hierarchical relationship.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Memory.StackedMemory.Wrap(AdaptiveExpressions.Memory.IMemory)">
            <summary>
            Wrap an object implementes IMemory interface into a StackedMemory object.
            </summary>
            <param name="memory">An object that implements IMemory.</param>
            <returns>A StackedMemory object.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Memory.StackedMemory.TryGetValue(System.String,System.Object@)">
            <summary>
            Try get value from a given path.
            </summary>
            <param name="path">Given path.</param>
            <param name="value">Resolved value.</param>
            <returns>True if the memory contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Memory.StackedMemory.SetValue(System.String,System.Object)">
            <summary>
            Set value to a given path.
            </summary>
            <param name="path">Memory path.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:AdaptiveExpressions.Memory.StackedMemory.Version">
            <summary>
            Get the version of the current StackedMemory.
            </summary>
            <returns>A string value.</returns>
        </member>
        <member name="T:AdaptiveExpressions.Options">
            <summary>
            Options used to define evaluation behaviors.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Options.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Options"/> class.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Options.#ctor(AdaptiveExpressions.Options)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Options"/> class.
            </summary>
            <param name="opt">An Options instance.</param>
        </member>
        <member name="P:AdaptiveExpressions.Options.NullSubstitution">
            <summary>
            Gets or sets a value, a function that been called when there is null value hit in memory.
            </summary>
            <value>
            The function delegate.
            </value>
        </member>
        <member name="P:AdaptiveExpressions.Options.Locale">
            <summary>
            Gets or sets a value, a locale of CultureInfo.
            </summary>
            <value>
            The locale info.
            </value>
        </member>
        <member name="T:AdaptiveExpressions.ExpressionParser">
            <summary>
            Parser to turn strings into an <see cref="T:AdaptiveExpressions.Expression"/>.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionParser.#ctor(AdaptiveExpressions.EvaluatorLookup)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.ExpressionParser"/> class.
            Constructor.
            </summary>
            <param name="lookup">Delegate to lookup evaluation information from type string.</param>
        </member>
        <member name="P:AdaptiveExpressions.ExpressionParser.EvaluatorLookup">
            <summary>
            Gets the elegate to lookup function information from the type.
            </summary>
            <value>
            The elegate to lookup function information from the type.
            </value>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionParser.Parse(System.String)">
            <summary>
            Parse the input into an expression.
            </summary>
            <param name="expression">Expression to parse.</param>
            <returns>Expression tree.</returns>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionParser.AntlrParse(System.String)">
            <summary>
            Parse the expression to ANTLR lexer and parser.
            </summary>
            <param name="expression">The input string expression.</param>
            <returns>A ParseTree.</returns>
        </member>
        <member name="T:AdaptiveExpressions.ParserErrorListener">
            <summary>
            Expression parser error listener.
            </summary>
        </member>
        <member name="F:AdaptiveExpressions.ParserErrorListener.Instance">
            <summary>
            A ParserErrorListener instance.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.ParserErrorListener.SyntaxError(System.IO.TextWriter,Antlr4.Runtime.IRecognizer,Antlr4.Runtime.IToken,System.Int32,System.Int32,System.String,Antlr4.Runtime.RecognitionException)">
            <summary>
            Throw a syntax error based one current context.
            </summary>
            <param name="output">Text writer.</param>
            <param name="recognizer">An Antlr4 runtime recognizer.</param>
            <param name="offendingSymbol">The token violate the lexer rules.</param>
            <param name="line">The line number where the error occurred.</param>
            <param name="charPositionInLine">The position of character in the line where the error occurred.</param>
            <param name="msg">The error message.</param>
            <param name="e">The RecognitionException.</param>
        </member>
        <member name="T:AdaptiveExpressions.TimeZoneConverter">
            <summary>
            Time zone converter.
            (1) From Windows (.NET) timezone to iana timezone.
            (2) From iana timezone to windows (.NET) timezone.
            windows ref: https://support.microsoft.com/en-us/help/22803/daylight-saving-time.
            iana ref: https://www.iana.org/time-zones.
            See database dictionary in file WindowsIanaMapping.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.TimeZoneConverter.IanaToWindows(System.String)">
            <summary>
            convert IANA timezone format to windows timezone format.
            </summary>
            <param name="ianaTimeZoneId">IANA timezone format.</param>
            <returns>windows timezone format.</returns>
        </member>
        <member name="M:AdaptiveExpressions.TimeZoneConverter.WindowsToIana(System.String)">
            <summary>
            Convert windows timezone to iana timezone.
            </summary>
            <param name="windowsTimeZoneId">Windows timezone format.</param>
            <returns>Iana timezone format.</returns>
        </member>
        <member name="T:AdaptiveExpressions.TriggerTrees.Clause">
            <summary>
            A canonical normal form expression.
            </summary>
        </member>
        <member name="P:AdaptiveExpressions.TriggerTrees.Clause.AnyBindings">
            <summary>
            Gets or sets the anyBinding dictionary.
            </summary>
            <value>A dictionary of strings, with string keys.</value>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.Clause.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string value.</returns>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.Clause.ToString(System.Text.StringBuilder,System.Int32)">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <param name="builder">A StringBuilder object.</param>
            <param name="indent">An integer represents the number of spaces at the start of a line.</param>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.Clause.Relationship(AdaptiveExpressions.TriggerTrees.Clause,System.Collections.Generic.Dictionary{System.String,AdaptiveExpressions.TriggerTrees.IPredicateComparer})">
            <summary>
            Compares the current Clause with another Clause.
            </summary>
            <param name="other">The other Clause to compare.</param>
            <param name="comparers">A comparer, which is a dictionary of IPredicateComparer with string keys.</param>
            <returns>A RelationshipType value between two Clause instances.</returns>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.Clause.Matches(AdaptiveExpressions.TriggerTrees.Clause,System.Object)">
            <summary>
            Determines whether the current Clause matches with another Clause.
            </summary>
            <param name="clause">The other Clause instance to compare with.</param>
            <param name="memory">The scope for looking up variables.</param>
            <returns>
            A boolean value indicating  whether the two Clauses are matched.
            Returns True if two Clauses are matched, otherwise returns False.
            </returns>
        </member>
        <member name="T:AdaptiveExpressions.TriggerTrees.Extensions">
            <summary>
            Extension method to swap between <see cref="T:AdaptiveExpressions.TriggerTrees.RelationshipType"/> "Generalizes" and "Specializes".
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.Extensions.Swap(AdaptiveExpressions.TriggerTrees.RelationshipType)">
            <summary>
            Swap operation between RelationshipType.Generalizes and RelationshipType.Specializes.
            If the original is RelationshipType.Specializes, the swap operation returns RelationshipType.Generalizes.
            If the original is RelationshipType.Generalizes, the swap operation returns RelationshipType.Specializes.
            Otherwise, the swap operation returns the original RelationType.
            </summary>
            <param name="original">The original RelationType.</param>
            <returns>The RelationshipType after the swap.</returns>
        </member>
        <member name="T:AdaptiveExpressions.TriggerTrees.IOptimizer">
            <summary>
            Optimize a clause by rewriting it.
            </summary>
            <remarks>
            If returned clause is null, then the expression will always be false.
            This is to allow things like combining simple comparisons into a range predicate.
            </remarks>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.IOptimizer.Optimize(AdaptiveExpressions.TriggerTrees.Clause)">
            <summary>
            Optionally rewrite a clause.
            </summary>
            <param name="clause">Original clause.</param>
            <returns>Optimized clause.</returns>
        </member>
        <member name="T:AdaptiveExpressions.TriggerTrees.IPredicateComparer">
            <summary>
            Compare two predicates to identify the relationship between them.
            </summary>
        </member>
        <member name="P:AdaptiveExpressions.TriggerTrees.IPredicateComparer.Predicate">
            <summary>
            Gets name of predicate.
            </summary>
            <value>
            Name of predicate.
            </value>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.IPredicateComparer.Relationship(AdaptiveExpressions.Expression,AdaptiveExpressions.Expression)">
            <summary>
            Identify the relationship between two predicates.
            </summary>
            <param name="predicate">First predicate.</param>
            <param name="other">Second predicate.</param>
            <returns>Relationship between predicates.</returns>
            <remarks>
            This is useful for doing things like identifying that Range("size", 1, 5) is more specialized than Range("size", 1, 10).
            </remarks>
        </member>
        <member name="T:AdaptiveExpressions.TriggerTrees.Node">
            <summary>
            Node in a trigger tree.
            </summary>
        </member>
        <member name="P:AdaptiveExpressions.TriggerTrees.Node.Triggers">
            <summary>
            Gets all of the most specific triggers that contain the <see cref="P:AdaptiveExpressions.TriggerTrees.Node.Clause"/> in this node.
            </summary>
            <value>
            All of the most specific triggers that contain the <see cref="P:AdaptiveExpressions.TriggerTrees.Node.Clause"/> in this node.
            </value>
        </member>
        <member name="P:AdaptiveExpressions.TriggerTrees.Node.AllTriggers">
            <summary>
            Gets all triggers that contain the <see cref="P:AdaptiveExpressions.TriggerTrees.Node.Clause"/> in this node. 
            </summary>
            <remarks>
            Triggers only contain the most specific trigger, so if this node 
            is Pred(A) and there was a rule R1: Pred(A) -> A1 and R2: Pred(A) v Pred(B) -> A2
            then the second trigger would be in AllTriggers, but not Triggers because it 
            is more general.
            </remarks>
            <value>
            All triggers that contain the <see cref="P:AdaptiveExpressions.TriggerTrees.Node.Clause"/> in this node. 
            </value>
        </member>
        <member name="P:AdaptiveExpressions.TriggerTrees.Node.Specializations">
            <summary>
            Gets specialized children of this node.
            </summary>
            <value>
            Specialized children of this node.
            </value>
        </member>
        <member name="P:AdaptiveExpressions.TriggerTrees.Node.Clause">
            <summary>
            Gets the logical conjunction this node represents.
            </summary>
            <value>
            The logical conjunction this node represents.
            </value>
        </member>
        <member name="P:AdaptiveExpressions.TriggerTrees.Node.Tree">
            <summary>
            Gets the tree this node is found in.
            </summary>
            <value>
            The tree this node is found in.
            </value>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.Node.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string value.</returns>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.Node.ToString(System.Text.StringBuilder,System.Int32)">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <param name="builder">A StringBuilder object.</param>
            <param name="indent">An integer representing the number of spaces at the start of a line.</param>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.Node.Relationship(AdaptiveExpressions.TriggerTrees.Node)">
            <summary>
            Identify the relationship between two nodes.
            </summary>
            <param name="other">Node to compare against.</param>
            <returns>Relationship between this node and the other.</returns>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.Node.Matches(System.Object)">
            <summary>
            Return the most specific matches below this node.
            </summary>
            <param name="state">Frame to evaluate against.</param>
            <returns>List of the most specific matches found.</returns>
        </member>
        <member name="T:AdaptiveExpressions.TriggerTrees.QuantifierType">
            <summary>
            Type of quantifier for expanding trigger expressions.
            </summary>
        </member>
        <member name="F:AdaptiveExpressions.TriggerTrees.QuantifierType.All">
            <summary>
            Within a clause, duplicate any predicate with variable for each possible binding.
            </summary>
        </member>
        <member name="F:AdaptiveExpressions.TriggerTrees.QuantifierType.Any">
            <summary>
            Create a new clause for each possible binding of variable.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.TriggerTrees.Quantifier">
            <summary>
            Quantifier for allowing runtime expansion of expressions.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.Quantifier.#ctor(System.String,AdaptiveExpressions.TriggerTrees.QuantifierType,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.TriggerTrees.Quantifier"/> class.
            </summary>
            <param name="variable">Name of variable to replace.</param>
            <param name="type">Type of quantifier.</param>
            <param name="bindings">Possible bindings for variable.</param>
        </member>
        <member name="P:AdaptiveExpressions.TriggerTrees.Quantifier.Variable">
            <summary>
            Gets name of variable that will be replaced.
            </summary>
            <value>
            Name of variable that will be replaced.
            </value>
        </member>
        <member name="P:AdaptiveExpressions.TriggerTrees.Quantifier.Type">
            <summary>
            Gets type of quantifier.
            </summary>
            <value>
            Type of quantifier.
            </value>
        </member>
        <member name="P:AdaptiveExpressions.TriggerTrees.Quantifier.Bindings">
            <summary>
            Gets possible bindings for quantifier.
            </summary>
            <value>
            Possible bindings for quantifier.
            </value>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.Quantifier.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string value.</returns>
        </member>
        <member name="T:AdaptiveExpressions.TriggerTrees.RelationshipType">
            <summary>
            Relationship between trigger expressions.
            </summary>
        </member>
        <member name="F:AdaptiveExpressions.TriggerTrees.RelationshipType.Specializes">
            <summary>
            First argument specializes the second, i.e. applies to a subset of the states the second argument covers.
            </summary>
        </member>
        <member name="F:AdaptiveExpressions.TriggerTrees.RelationshipType.Equal">
            <summary>
            First and second argument are the same expression.
            </summary>
        </member>
        <member name="F:AdaptiveExpressions.TriggerTrees.RelationshipType.Generalizes">
            <summary>
            First argument generalizes the second, i.e. applies to a superset of the states the second argument covers.
            </summary>
        </member>
        <member name="F:AdaptiveExpressions.TriggerTrees.RelationshipType.Incomparable">
            <summary>
            Cannot tell how the first and second arguments relate.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.TriggerTrees.Trigger">
            <summary>
            A trigger is a combination of a trigger expression and the corresponding action.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.Trigger.#ctor(AdaptiveExpressions.TriggerTrees.TriggerTree,AdaptiveExpressions.Expression,System.Object,AdaptiveExpressions.TriggerTrees.Quantifier[])">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.TriggerTrees.Trigger"/> class.
            Construct a trigger expression.
            </summary>
            <param name="tree">Trigger tree that contains this trigger.</param>
            <param name="expression">Expression for when the trigger action is possible.</param>
            <param name="action">Action to take when a trigger matches.</param>
            <param name="quantifiers">Quantifiers to dynamically expand the expression.</param>
        </member>
        <member name="P:AdaptiveExpressions.TriggerTrees.Trigger.OriginalExpression">
            <summary>
            Gets the original trigger expression.
            </summary>
            <value>
            Original trigger expression.
            </value>
        </member>
        <member name="P:AdaptiveExpressions.TriggerTrees.Trigger.Action">
            <summary>
            Gets action to take when trigger is true.
            </summary>
            <value>
            Action to take when trigger is true.
            </value>
        </member>
        <member name="P:AdaptiveExpressions.TriggerTrees.Trigger.Clauses">
            <summary>
            Gets list of expressions converted into Disjunctive Normal Form where ! is pushed to the leaves and 
            there is an implicit || between clauses and &amp;&amp; within a clause. 
            </summary>
            <value>
            List of expressions converted into Disjunctive Normal Form where ! is pushed to the leaves and 
            there is an implicit || between clauses and &amp;&amp; within a clause. 
            </value>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.Trigger.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string value.</returns>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.Trigger.Relationship(AdaptiveExpressions.TriggerTrees.Trigger,System.Collections.Generic.Dictionary{System.String,AdaptiveExpressions.TriggerTrees.IPredicateComparer})">
            <summary>
            Determines the relationship between current instance and another Trigger instance.
            </summary>
            <param name="other">The other Trigger instance.</param>
            <param name="comparers">The comparer dictionary.</param>
            <returns>A RelationshipType value.</returns>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.Trigger.Matches(AdaptiveExpressions.TriggerTrees.Clause,System.Object)">
            <summary>
            Determines whether there is a member in the current Clause that matches the nodeClause parameter.
            </summary>
            <param name="nodeClause">The other Clause instance to match.</param>
            <param name="state">The scope for looking up variables.</param>
            <returns>
            A boolean value indicating  whether there is a member matches.
            Returns True if such member exists, otherwise returns False.
            </returns>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.Trigger.ToString(System.Text.StringBuilder,System.Int32)">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <param name="builder">A StringBuilder object.</param>
            <param name="indent">
            An integer represents the number of spaces at the start of a line. 
            </param>
        </member>
        <member name="T:AdaptiveExpressions.TriggerTrees.TriggerTree">
            <summary>
            A trigger tree organizes evaluators according to generalization/specialization in order to make it easier to use rules.
            </summary>
            <remarks>
            A trigger expression generates true if the expression evaluated on a frame is true.
            The expression itself consists of arbitrary boolean functions ("predicates") combined with &amp;&amp; || !.
            Most predicates are expressed over the frame passed in, but they can be anything--there are even ways of optimizing or comparing them.
            By organizing evaluators into a tree (technically a DAG) it becomes easier to use rules by reducing the coupling between rules.
            For example if a rule applies if some predicate A is true, then another rule that applies if A &amp;&amp; B are true is
            more specialized.  If the second expression is true, then because we know of the relationship we can ignore the first
            rule--even though its expression is true.  Without this kind of capability in order to add the second rule, you would
            have to change the first to become A &amp;&amp; !B.
            </remarks>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.TriggerTree.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.TriggerTrees.TriggerTree"/> class.
            </summary>
        </member>
        <member name="P:AdaptiveExpressions.TriggerTrees.TriggerTree.Optimizers">
            <summary>
            Gets a list of Optimizers for optimizing clauses.
            </summary>
            <value>A value of list of Optimizers.</value>
        </member>
        <member name="P:AdaptiveExpressions.TriggerTrees.TriggerTree.Comparers">
            <summary>
            Gets a value of a dictionary, which has IPredicateComparer values, with string keys.
            </summary>
            <value>A dictionary of IPredicateComparer values, with string keys.</value>
        </member>
        <member name="P:AdaptiveExpressions.TriggerTrees.TriggerTree.Root">
            <summary>
            Gets or sets a value of the root node.
            </summary>
            <value>A Node instance.</value>
        </member>
        <member name="P:AdaptiveExpressions.TriggerTrees.TriggerTree.TotalTriggers">
            <summary>
            Gets or sets the total number of triggers.
            </summary>
            <value>An integet number.</value>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.TriggerTree.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string value.</returns>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.TriggerTree.AddTrigger(System.String,System.Object,AdaptiveExpressions.TriggerTrees.Quantifier[])">
            <summary>
            Add a trigger expression to the tree.
            </summary>
            <param name="expression">Trigger to add.</param>
            <param name="action">Action when triggered.</param>
            <param name="quantifiers">Quantifiers to use when expanding expressions.</param>
            <returns>New trigger.</returns>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.TriggerTree.AddTrigger(AdaptiveExpressions.Expression,System.Object,AdaptiveExpressions.TriggerTrees.Quantifier[])">
            <summary>
            Add a trigger expression to the tree.
            </summary>
            <param name="expression">Trigger to add.</param>
            <param name="action">Action when triggered.</param>
            <param name="quantifiers">Quantifiers to use when expanding expressions.</param>
            <returns>New trigger.</returns>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.TriggerTree.RemoveTrigger(AdaptiveExpressions.TriggerTrees.Trigger)">
            <summary>
            Remove trigger from tree.
            </summary>
            <param name="trigger">Trigger to remove.</param>
            <returns>True if removed trigger.</returns>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.TriggerTree.TreeToString(System.Int32)">
            <summary>
            Generate a string describing the tree.
            </summary>
            <param name="indent">Current indent level.</param>
            <returns>string describing the tree.</returns>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.TriggerTree.GenerateGraph(System.String)">
            <summary>
            Generates a graph to given path.
            </summary>
            <param name="outPath">The path to save the graph.</param>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.TriggerTree.Matches(System.Object)">
            <summary>
            Return the possible matches given the current state.
            </summary>
            <param name="state">State to evaluate against.</param>
            <returns>Enumeration of possible matches.</returns>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.TriggerTree.VerifyTree">
            <summary>
            Verify the tree meets specialization/generalization invariants. 
            </summary>
            <returns>Bad node if found.</returns>
        </member>
        <member name="T:CommonRegexBaseListener">
            <summary>
            This class provides an empty implementation of <see cref="T:ICommonRegexListener"/>,
            which can be extended to create a listener which only needs to handle a subset
            of the available methods.
            </summary>
        </member>
        <member name="M:CommonRegexBaseListener.EnterParse(CommonRegexParser.ParseContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.parse"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.ExitParse(CommonRegexParser.ParseContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.parse"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.EnterAlternation(CommonRegexParser.AlternationContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.alternation"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.ExitAlternation(CommonRegexParser.AlternationContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.alternation"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.EnterExpr(CommonRegexParser.ExprContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.expr"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.ExitExpr(CommonRegexParser.ExprContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.expr"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.EnterElement(CommonRegexParser.ElementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.element"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.ExitElement(CommonRegexParser.ElementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.element"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.EnterQuantifier(CommonRegexParser.QuantifierContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.quantifier"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.ExitQuantifier(CommonRegexParser.QuantifierContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.quantifier"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.EnterQuantifier_type(CommonRegexParser.Quantifier_typeContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.quantifier_type"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.ExitQuantifier_type(CommonRegexParser.Quantifier_typeContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.quantifier_type"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.EnterCharacter_class(CommonRegexParser.Character_classContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.character_class"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.ExitCharacter_class(CommonRegexParser.Character_classContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.character_class"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.EnterCapture(CommonRegexParser.CaptureContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.capture"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.ExitCapture(CommonRegexParser.CaptureContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.capture"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.EnterNon_capture(CommonRegexParser.Non_captureContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.non_capture"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.ExitNon_capture(CommonRegexParser.Non_captureContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.non_capture"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.EnterOption(CommonRegexParser.OptionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.option"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.ExitOption(CommonRegexParser.OptionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.option"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.EnterOption_flag(CommonRegexParser.Option_flagContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.option_flag"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.ExitOption_flag(CommonRegexParser.Option_flagContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.option_flag"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.EnterAtom(CommonRegexParser.AtomContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.atom"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.ExitAtom(CommonRegexParser.AtomContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.atom"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.EnterCc_atom(CommonRegexParser.Cc_atomContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.cc_atom"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.ExitCc_atom(CommonRegexParser.Cc_atomContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.cc_atom"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.EnterShared_atom(CommonRegexParser.Shared_atomContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.shared_atom"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.ExitShared_atom(CommonRegexParser.Shared_atomContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.shared_atom"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.EnterLiteral(CommonRegexParser.LiteralContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.literal"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.ExitLiteral(CommonRegexParser.LiteralContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.literal"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.EnterCc_literal(CommonRegexParser.Cc_literalContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.cc_literal"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.ExitCc_literal(CommonRegexParser.Cc_literalContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.cc_literal"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.EnterShared_literal(CommonRegexParser.Shared_literalContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.shared_literal"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.ExitShared_literal(CommonRegexParser.Shared_literalContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.shared_literal"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.EnterNumber(CommonRegexParser.NumberContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.number"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.ExitNumber(CommonRegexParser.NumberContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.number"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.EnterOctal_char(CommonRegexParser.Octal_charContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.octal_char"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.ExitOctal_char(CommonRegexParser.Octal_charContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.octal_char"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.EnterOctal_digit(CommonRegexParser.Octal_digitContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.octal_digit"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.ExitOctal_digit(CommonRegexParser.Octal_digitContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.octal_digit"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.EnterDigits(CommonRegexParser.DigitsContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.digits"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.ExitDigits(CommonRegexParser.DigitsContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.digits"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.EnterDigit(CommonRegexParser.DigitContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.digit"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.ExitDigit(CommonRegexParser.DigitContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.digit"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.EnterName(CommonRegexParser.NameContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.name"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.ExitName(CommonRegexParser.NameContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.name"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.EnterAlpha_nums(CommonRegexParser.Alpha_numsContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.alpha_nums"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.ExitAlpha_nums(CommonRegexParser.Alpha_numsContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.alpha_nums"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.EnterNon_close_parens(CommonRegexParser.Non_close_parensContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.non_close_parens"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.ExitNon_close_parens(CommonRegexParser.Non_close_parensContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.non_close_parens"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.EnterNon_close_paren(CommonRegexParser.Non_close_parenContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.non_close_paren"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.ExitNon_close_paren(CommonRegexParser.Non_close_parenContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.non_close_paren"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.EnterLetter(CommonRegexParser.LetterContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.letter"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.ExitLetter(CommonRegexParser.LetterContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.letter"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:CommonRegexBaseListener.EnterEveryRule(Antlr4.Runtime.ParserRuleContext)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:CommonRegexBaseListener.ExitEveryRule(Antlr4.Runtime.ParserRuleContext)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:CommonRegexBaseListener.VisitTerminal(Antlr4.Runtime.Tree.ITerminalNode)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:CommonRegexBaseListener.VisitErrorNode(Antlr4.Runtime.Tree.IErrorNode)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="T:CommonRegexBaseVisitor`1">
            <summary>
            This class provides an empty implementation of <see cref="T:ICommonRegexVisitor`1"/>,
            which can be extended to create a visitor which only needs to handle a subset
            of the available methods.
            </summary>
            <typeparam name="Result">The return type of the visit operation.</typeparam>
        </member>
        <member name="M:CommonRegexBaseVisitor`1.VisitParse(CommonRegexParser.ParseContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.parse"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CommonRegexBaseVisitor`1.VisitAlternation(CommonRegexParser.AlternationContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.alternation"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CommonRegexBaseVisitor`1.VisitExpr(CommonRegexParser.ExprContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.expr"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CommonRegexBaseVisitor`1.VisitElement(CommonRegexParser.ElementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.element"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CommonRegexBaseVisitor`1.VisitQuantifier(CommonRegexParser.QuantifierContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.quantifier"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CommonRegexBaseVisitor`1.VisitQuantifier_type(CommonRegexParser.Quantifier_typeContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.quantifier_type"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CommonRegexBaseVisitor`1.VisitCharacter_class(CommonRegexParser.Character_classContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.character_class"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CommonRegexBaseVisitor`1.VisitCapture(CommonRegexParser.CaptureContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.capture"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CommonRegexBaseVisitor`1.VisitNon_capture(CommonRegexParser.Non_captureContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.non_capture"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CommonRegexBaseVisitor`1.VisitOption(CommonRegexParser.OptionContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.option"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CommonRegexBaseVisitor`1.VisitOption_flag(CommonRegexParser.Option_flagContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.option_flag"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CommonRegexBaseVisitor`1.VisitAtom(CommonRegexParser.AtomContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.atom"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CommonRegexBaseVisitor`1.VisitCc_atom(CommonRegexParser.Cc_atomContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.cc_atom"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CommonRegexBaseVisitor`1.VisitShared_atom(CommonRegexParser.Shared_atomContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.shared_atom"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CommonRegexBaseVisitor`1.VisitLiteral(CommonRegexParser.LiteralContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.literal"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CommonRegexBaseVisitor`1.VisitCc_literal(CommonRegexParser.Cc_literalContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.cc_literal"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CommonRegexBaseVisitor`1.VisitShared_literal(CommonRegexParser.Shared_literalContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.shared_literal"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CommonRegexBaseVisitor`1.VisitNumber(CommonRegexParser.NumberContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.number"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CommonRegexBaseVisitor`1.VisitOctal_char(CommonRegexParser.Octal_charContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.octal_char"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CommonRegexBaseVisitor`1.VisitOctal_digit(CommonRegexParser.Octal_digitContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.octal_digit"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CommonRegexBaseVisitor`1.VisitDigits(CommonRegexParser.DigitsContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.digits"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CommonRegexBaseVisitor`1.VisitDigit(CommonRegexParser.DigitContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.digit"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CommonRegexBaseVisitor`1.VisitName(CommonRegexParser.NameContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.name"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CommonRegexBaseVisitor`1.VisitAlpha_nums(CommonRegexParser.Alpha_numsContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.alpha_nums"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CommonRegexBaseVisitor`1.VisitNon_close_parens(CommonRegexParser.Non_close_parensContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.non_close_parens"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CommonRegexBaseVisitor`1.VisitNon_close_paren(CommonRegexParser.Non_close_parenContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.non_close_paren"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:CommonRegexBaseVisitor`1.VisitLetter(CommonRegexParser.LetterContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.letter"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="T:ICommonRegexListener">
            <summary>
            This interface defines a complete listener for a parse tree produced by
            <see cref="T:CommonRegexParser"/>.
            </summary>
        </member>
        <member name="M:ICommonRegexListener.EnterParse(CommonRegexParser.ParseContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.parse"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.ExitParse(CommonRegexParser.ParseContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.parse"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.EnterAlternation(CommonRegexParser.AlternationContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.alternation"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.ExitAlternation(CommonRegexParser.AlternationContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.alternation"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.EnterExpr(CommonRegexParser.ExprContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.expr"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.ExitExpr(CommonRegexParser.ExprContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.expr"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.EnterElement(CommonRegexParser.ElementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.element"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.ExitElement(CommonRegexParser.ElementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.element"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.EnterQuantifier(CommonRegexParser.QuantifierContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.quantifier"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.ExitQuantifier(CommonRegexParser.QuantifierContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.quantifier"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.EnterQuantifier_type(CommonRegexParser.Quantifier_typeContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.quantifier_type"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.ExitQuantifier_type(CommonRegexParser.Quantifier_typeContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.quantifier_type"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.EnterCharacter_class(CommonRegexParser.Character_classContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.character_class"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.ExitCharacter_class(CommonRegexParser.Character_classContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.character_class"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.EnterCapture(CommonRegexParser.CaptureContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.capture"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.ExitCapture(CommonRegexParser.CaptureContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.capture"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.EnterNon_capture(CommonRegexParser.Non_captureContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.non_capture"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.ExitNon_capture(CommonRegexParser.Non_captureContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.non_capture"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.EnterOption(CommonRegexParser.OptionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.option"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.ExitOption(CommonRegexParser.OptionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.option"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.EnterOption_flag(CommonRegexParser.Option_flagContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.option_flag"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.ExitOption_flag(CommonRegexParser.Option_flagContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.option_flag"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.EnterAtom(CommonRegexParser.AtomContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.atom"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.ExitAtom(CommonRegexParser.AtomContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.atom"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.EnterCc_atom(CommonRegexParser.Cc_atomContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.cc_atom"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.ExitCc_atom(CommonRegexParser.Cc_atomContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.cc_atom"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.EnterShared_atom(CommonRegexParser.Shared_atomContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.shared_atom"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.ExitShared_atom(CommonRegexParser.Shared_atomContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.shared_atom"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.EnterLiteral(CommonRegexParser.LiteralContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.literal"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.ExitLiteral(CommonRegexParser.LiteralContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.literal"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.EnterCc_literal(CommonRegexParser.Cc_literalContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.cc_literal"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.ExitCc_literal(CommonRegexParser.Cc_literalContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.cc_literal"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.EnterShared_literal(CommonRegexParser.Shared_literalContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.shared_literal"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.ExitShared_literal(CommonRegexParser.Shared_literalContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.shared_literal"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.EnterNumber(CommonRegexParser.NumberContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.number"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.ExitNumber(CommonRegexParser.NumberContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.number"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.EnterOctal_char(CommonRegexParser.Octal_charContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.octal_char"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.ExitOctal_char(CommonRegexParser.Octal_charContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.octal_char"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.EnterOctal_digit(CommonRegexParser.Octal_digitContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.octal_digit"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.ExitOctal_digit(CommonRegexParser.Octal_digitContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.octal_digit"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.EnterDigits(CommonRegexParser.DigitsContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.digits"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.ExitDigits(CommonRegexParser.DigitsContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.digits"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.EnterDigit(CommonRegexParser.DigitContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.digit"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.ExitDigit(CommonRegexParser.DigitContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.digit"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.EnterName(CommonRegexParser.NameContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.name"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.ExitName(CommonRegexParser.NameContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.name"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.EnterAlpha_nums(CommonRegexParser.Alpha_numsContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.alpha_nums"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.ExitAlpha_nums(CommonRegexParser.Alpha_numsContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.alpha_nums"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.EnterNon_close_parens(CommonRegexParser.Non_close_parensContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.non_close_parens"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.ExitNon_close_parens(CommonRegexParser.Non_close_parensContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.non_close_parens"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.EnterNon_close_paren(CommonRegexParser.Non_close_parenContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.non_close_paren"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.ExitNon_close_paren(CommonRegexParser.Non_close_parenContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.non_close_paren"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.EnterLetter(CommonRegexParser.LetterContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:CommonRegexParser.letter"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ICommonRegexListener.ExitLetter(CommonRegexParser.LetterContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:CommonRegexParser.letter"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="T:ICommonRegexVisitor`1">
            <summary>
            This interface defines a complete generic visitor for a parse tree produced
            by <see cref="T:CommonRegexParser"/>.
            </summary>
            <typeparam name="Result">The return type of the visit operation.</typeparam>
        </member>
        <member name="M:ICommonRegexVisitor`1.VisitParse(CommonRegexParser.ParseContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.parse"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ICommonRegexVisitor`1.VisitAlternation(CommonRegexParser.AlternationContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.alternation"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ICommonRegexVisitor`1.VisitExpr(CommonRegexParser.ExprContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.expr"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ICommonRegexVisitor`1.VisitElement(CommonRegexParser.ElementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.element"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ICommonRegexVisitor`1.VisitQuantifier(CommonRegexParser.QuantifierContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.quantifier"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ICommonRegexVisitor`1.VisitQuantifier_type(CommonRegexParser.Quantifier_typeContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.quantifier_type"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ICommonRegexVisitor`1.VisitCharacter_class(CommonRegexParser.Character_classContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.character_class"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ICommonRegexVisitor`1.VisitCapture(CommonRegexParser.CaptureContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.capture"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ICommonRegexVisitor`1.VisitNon_capture(CommonRegexParser.Non_captureContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.non_capture"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ICommonRegexVisitor`1.VisitOption(CommonRegexParser.OptionContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.option"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ICommonRegexVisitor`1.VisitOption_flag(CommonRegexParser.Option_flagContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.option_flag"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ICommonRegexVisitor`1.VisitAtom(CommonRegexParser.AtomContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.atom"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ICommonRegexVisitor`1.VisitCc_atom(CommonRegexParser.Cc_atomContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.cc_atom"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ICommonRegexVisitor`1.VisitShared_atom(CommonRegexParser.Shared_atomContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.shared_atom"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ICommonRegexVisitor`1.VisitLiteral(CommonRegexParser.LiteralContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.literal"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ICommonRegexVisitor`1.VisitCc_literal(CommonRegexParser.Cc_literalContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.cc_literal"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ICommonRegexVisitor`1.VisitShared_literal(CommonRegexParser.Shared_literalContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.shared_literal"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ICommonRegexVisitor`1.VisitNumber(CommonRegexParser.NumberContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.number"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ICommonRegexVisitor`1.VisitOctal_char(CommonRegexParser.Octal_charContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.octal_char"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ICommonRegexVisitor`1.VisitOctal_digit(CommonRegexParser.Octal_digitContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.octal_digit"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ICommonRegexVisitor`1.VisitDigits(CommonRegexParser.DigitsContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.digits"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ICommonRegexVisitor`1.VisitDigit(CommonRegexParser.DigitContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.digit"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ICommonRegexVisitor`1.VisitName(CommonRegexParser.NameContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.name"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ICommonRegexVisitor`1.VisitAlpha_nums(CommonRegexParser.Alpha_numsContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.alpha_nums"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ICommonRegexVisitor`1.VisitNon_close_parens(CommonRegexParser.Non_close_parensContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.non_close_parens"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ICommonRegexVisitor`1.VisitNon_close_paren(CommonRegexParser.Non_close_parenContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.non_close_paren"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ICommonRegexVisitor`1.VisitLetter(CommonRegexParser.LetterContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:CommonRegexParser.letter"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="T:ExpressionAntlrParserBaseListener">
            <summary>
            This class provides an empty implementation of <see cref="T:IExpressionAntlrParserListener"/>,
            which can be extended to create a listener which only needs to handle a subset
            of the available methods.
            </summary>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.EnterFile(ExpressionAntlrParser.FileContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:ExpressionAntlrParser.file"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.ExitFile(ExpressionAntlrParser.FileContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:ExpressionAntlrParser.file"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.EnterUnaryOpExp(ExpressionAntlrParser.UnaryOpExpContext)">
            <summary>
            Enter a parse tree produced by the <c>unaryOpExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.ExitUnaryOpExp(ExpressionAntlrParser.UnaryOpExpContext)">
            <summary>
            Exit a parse tree produced by the <c>unaryOpExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.EnterBinaryOpExp(ExpressionAntlrParser.BinaryOpExpContext)">
            <summary>
            Enter a parse tree produced by the <c>binaryOpExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.ExitBinaryOpExp(ExpressionAntlrParser.BinaryOpExpContext)">
            <summary>
            Exit a parse tree produced by the <c>binaryOpExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.EnterPrimaryExp(ExpressionAntlrParser.PrimaryExpContext)">
            <summary>
            Enter a parse tree produced by the <c>primaryExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.ExitPrimaryExp(ExpressionAntlrParser.PrimaryExpContext)">
            <summary>
            Exit a parse tree produced by the <c>primaryExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.EnterTripleOpExp(ExpressionAntlrParser.TripleOpExpContext)">
            <summary>
            Enter a parse tree produced by the <c>tripleOpExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.ExitTripleOpExp(ExpressionAntlrParser.TripleOpExpContext)">
            <summary>
            Exit a parse tree produced by the <c>tripleOpExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.EnterFuncInvokeExp(ExpressionAntlrParser.FuncInvokeExpContext)">
            <summary>
            Enter a parse tree produced by the <c>funcInvokeExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.ExitFuncInvokeExp(ExpressionAntlrParser.FuncInvokeExpContext)">
            <summary>
            Exit a parse tree produced by the <c>funcInvokeExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.EnterIdAtom(ExpressionAntlrParser.IdAtomContext)">
            <summary>
            Enter a parse tree produced by the <c>idAtom</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.ExitIdAtom(ExpressionAntlrParser.IdAtomContext)">
            <summary>
            Exit a parse tree produced by the <c>idAtom</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.EnterJsonCreationExp(ExpressionAntlrParser.JsonCreationExpContext)">
            <summary>
            Enter a parse tree produced by the <c>jsonCreationExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.ExitJsonCreationExp(ExpressionAntlrParser.JsonCreationExpContext)">
            <summary>
            Exit a parse tree produced by the <c>jsonCreationExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.EnterStringAtom(ExpressionAntlrParser.StringAtomContext)">
            <summary>
            Enter a parse tree produced by the <c>stringAtom</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.ExitStringAtom(ExpressionAntlrParser.StringAtomContext)">
            <summary>
            Exit a parse tree produced by the <c>stringAtom</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.EnterIndexAccessExp(ExpressionAntlrParser.IndexAccessExpContext)">
            <summary>
            Enter a parse tree produced by the <c>indexAccessExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.ExitIndexAccessExp(ExpressionAntlrParser.IndexAccessExpContext)">
            <summary>
            Exit a parse tree produced by the <c>indexAccessExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.EnterStringInterpolationAtom(ExpressionAntlrParser.StringInterpolationAtomContext)">
            <summary>
            Enter a parse tree produced by the <c>stringInterpolationAtom</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.ExitStringInterpolationAtom(ExpressionAntlrParser.StringInterpolationAtomContext)">
            <summary>
            Exit a parse tree produced by the <c>stringInterpolationAtom</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.EnterMemberAccessExp(ExpressionAntlrParser.MemberAccessExpContext)">
            <summary>
            Enter a parse tree produced by the <c>memberAccessExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.ExitMemberAccessExp(ExpressionAntlrParser.MemberAccessExpContext)">
            <summary>
            Exit a parse tree produced by the <c>memberAccessExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.EnterParenthesisExp(ExpressionAntlrParser.ParenthesisExpContext)">
            <summary>
            Enter a parse tree produced by the <c>parenthesisExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.ExitParenthesisExp(ExpressionAntlrParser.ParenthesisExpContext)">
            <summary>
            Exit a parse tree produced by the <c>parenthesisExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.EnterNumericAtom(ExpressionAntlrParser.NumericAtomContext)">
            <summary>
            Enter a parse tree produced by the <c>numericAtom</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.ExitNumericAtom(ExpressionAntlrParser.NumericAtomContext)">
            <summary>
            Exit a parse tree produced by the <c>numericAtom</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.EnterArrayCreationExp(ExpressionAntlrParser.ArrayCreationExpContext)">
            <summary>
            Enter a parse tree produced by the <c>arrayCreationExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.ExitArrayCreationExp(ExpressionAntlrParser.ArrayCreationExpContext)">
            <summary>
            Exit a parse tree produced by the <c>arrayCreationExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.EnterStringInterpolation(ExpressionAntlrParser.StringInterpolationContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:ExpressionAntlrParser.stringInterpolation"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.ExitStringInterpolation(ExpressionAntlrParser.StringInterpolationContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:ExpressionAntlrParser.stringInterpolation"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.EnterTextContent(ExpressionAntlrParser.TextContentContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:ExpressionAntlrParser.textContent"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.ExitTextContent(ExpressionAntlrParser.TextContentContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:ExpressionAntlrParser.textContent"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.EnterArgsList(ExpressionAntlrParser.ArgsListContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:ExpressionAntlrParser.argsList"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.ExitArgsList(ExpressionAntlrParser.ArgsListContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:ExpressionAntlrParser.argsList"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.EnterLambda(ExpressionAntlrParser.LambdaContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:ExpressionAntlrParser.lambda"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.ExitLambda(ExpressionAntlrParser.LambdaContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:ExpressionAntlrParser.lambda"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.EnterKeyValuePairList(ExpressionAntlrParser.KeyValuePairListContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:ExpressionAntlrParser.keyValuePairList"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.ExitKeyValuePairList(ExpressionAntlrParser.KeyValuePairListContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:ExpressionAntlrParser.keyValuePairList"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.EnterKeyValuePair(ExpressionAntlrParser.KeyValuePairContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:ExpressionAntlrParser.keyValuePair"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.ExitKeyValuePair(ExpressionAntlrParser.KeyValuePairContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:ExpressionAntlrParser.keyValuePair"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.EnterKey(ExpressionAntlrParser.KeyContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:ExpressionAntlrParser.key"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.ExitKey(ExpressionAntlrParser.KeyContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:ExpressionAntlrParser.key"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.EnterEveryRule(Antlr4.Runtime.ParserRuleContext)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.ExitEveryRule(Antlr4.Runtime.ParserRuleContext)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.VisitTerminal(Antlr4.Runtime.Tree.ITerminalNode)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:ExpressionAntlrParserBaseListener.VisitErrorNode(Antlr4.Runtime.Tree.IErrorNode)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="T:ExpressionAntlrParserBaseVisitor`1">
            <summary>
            This class provides an empty implementation of <see cref="T:IExpressionAntlrParserVisitor`1"/>,
            which can be extended to create a visitor which only needs to handle a subset
            of the available methods.
            </summary>
            <typeparam name="Result">The return type of the visit operation.</typeparam>
        </member>
        <member name="M:ExpressionAntlrParserBaseVisitor`1.VisitFile(ExpressionAntlrParser.FileContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:ExpressionAntlrParser.file"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ExpressionAntlrParserBaseVisitor`1.VisitUnaryOpExp(ExpressionAntlrParser.UnaryOpExpContext)">
            <summary>
            Visit a parse tree produced by the <c>unaryOpExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ExpressionAntlrParserBaseVisitor`1.VisitBinaryOpExp(ExpressionAntlrParser.BinaryOpExpContext)">
            <summary>
            Visit a parse tree produced by the <c>binaryOpExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ExpressionAntlrParserBaseVisitor`1.VisitPrimaryExp(ExpressionAntlrParser.PrimaryExpContext)">
            <summary>
            Visit a parse tree produced by the <c>primaryExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ExpressionAntlrParserBaseVisitor`1.VisitTripleOpExp(ExpressionAntlrParser.TripleOpExpContext)">
            <summary>
            Visit a parse tree produced by the <c>tripleOpExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ExpressionAntlrParserBaseVisitor`1.VisitFuncInvokeExp(ExpressionAntlrParser.FuncInvokeExpContext)">
            <summary>
            Visit a parse tree produced by the <c>funcInvokeExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ExpressionAntlrParserBaseVisitor`1.VisitIdAtom(ExpressionAntlrParser.IdAtomContext)">
            <summary>
            Visit a parse tree produced by the <c>idAtom</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ExpressionAntlrParserBaseVisitor`1.VisitJsonCreationExp(ExpressionAntlrParser.JsonCreationExpContext)">
            <summary>
            Visit a parse tree produced by the <c>jsonCreationExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ExpressionAntlrParserBaseVisitor`1.VisitStringAtom(ExpressionAntlrParser.StringAtomContext)">
            <summary>
            Visit a parse tree produced by the <c>stringAtom</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ExpressionAntlrParserBaseVisitor`1.VisitIndexAccessExp(ExpressionAntlrParser.IndexAccessExpContext)">
            <summary>
            Visit a parse tree produced by the <c>indexAccessExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ExpressionAntlrParserBaseVisitor`1.VisitStringInterpolationAtom(ExpressionAntlrParser.StringInterpolationAtomContext)">
            <summary>
            Visit a parse tree produced by the <c>stringInterpolationAtom</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ExpressionAntlrParserBaseVisitor`1.VisitMemberAccessExp(ExpressionAntlrParser.MemberAccessExpContext)">
            <summary>
            Visit a parse tree produced by the <c>memberAccessExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ExpressionAntlrParserBaseVisitor`1.VisitParenthesisExp(ExpressionAntlrParser.ParenthesisExpContext)">
            <summary>
            Visit a parse tree produced by the <c>parenthesisExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ExpressionAntlrParserBaseVisitor`1.VisitNumericAtom(ExpressionAntlrParser.NumericAtomContext)">
            <summary>
            Visit a parse tree produced by the <c>numericAtom</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ExpressionAntlrParserBaseVisitor`1.VisitArrayCreationExp(ExpressionAntlrParser.ArrayCreationExpContext)">
            <summary>
            Visit a parse tree produced by the <c>arrayCreationExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ExpressionAntlrParserBaseVisitor`1.VisitStringInterpolation(ExpressionAntlrParser.StringInterpolationContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:ExpressionAntlrParser.stringInterpolation"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ExpressionAntlrParserBaseVisitor`1.VisitTextContent(ExpressionAntlrParser.TextContentContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:ExpressionAntlrParser.textContent"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ExpressionAntlrParserBaseVisitor`1.VisitArgsList(ExpressionAntlrParser.ArgsListContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:ExpressionAntlrParser.argsList"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ExpressionAntlrParserBaseVisitor`1.VisitLambda(ExpressionAntlrParser.LambdaContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:ExpressionAntlrParser.lambda"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ExpressionAntlrParserBaseVisitor`1.VisitKeyValuePairList(ExpressionAntlrParser.KeyValuePairListContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:ExpressionAntlrParser.keyValuePairList"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ExpressionAntlrParserBaseVisitor`1.VisitKeyValuePair(ExpressionAntlrParser.KeyValuePairContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:ExpressionAntlrParser.keyValuePair"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ExpressionAntlrParserBaseVisitor`1.VisitKey(ExpressionAntlrParser.KeyContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:ExpressionAntlrParser.key"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="T:IExpressionAntlrParserListener">
            <summary>
            This interface defines a complete listener for a parse tree produced by
            <see cref="T:ExpressionAntlrParser"/>.
            </summary>
        </member>
        <member name="M:IExpressionAntlrParserListener.EnterFile(ExpressionAntlrParser.FileContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:ExpressionAntlrParser.file"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.ExitFile(ExpressionAntlrParser.FileContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:ExpressionAntlrParser.file"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.EnterUnaryOpExp(ExpressionAntlrParser.UnaryOpExpContext)">
            <summary>
            Enter a parse tree produced by the <c>unaryOpExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.ExitUnaryOpExp(ExpressionAntlrParser.UnaryOpExpContext)">
            <summary>
            Exit a parse tree produced by the <c>unaryOpExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.EnterBinaryOpExp(ExpressionAntlrParser.BinaryOpExpContext)">
            <summary>
            Enter a parse tree produced by the <c>binaryOpExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.ExitBinaryOpExp(ExpressionAntlrParser.BinaryOpExpContext)">
            <summary>
            Exit a parse tree produced by the <c>binaryOpExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.EnterPrimaryExp(ExpressionAntlrParser.PrimaryExpContext)">
            <summary>
            Enter a parse tree produced by the <c>primaryExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.ExitPrimaryExp(ExpressionAntlrParser.PrimaryExpContext)">
            <summary>
            Exit a parse tree produced by the <c>primaryExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.EnterTripleOpExp(ExpressionAntlrParser.TripleOpExpContext)">
            <summary>
            Enter a parse tree produced by the <c>tripleOpExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.ExitTripleOpExp(ExpressionAntlrParser.TripleOpExpContext)">
            <summary>
            Exit a parse tree produced by the <c>tripleOpExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.EnterFuncInvokeExp(ExpressionAntlrParser.FuncInvokeExpContext)">
            <summary>
            Enter a parse tree produced by the <c>funcInvokeExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.ExitFuncInvokeExp(ExpressionAntlrParser.FuncInvokeExpContext)">
            <summary>
            Exit a parse tree produced by the <c>funcInvokeExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.EnterIdAtom(ExpressionAntlrParser.IdAtomContext)">
            <summary>
            Enter a parse tree produced by the <c>idAtom</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.ExitIdAtom(ExpressionAntlrParser.IdAtomContext)">
            <summary>
            Exit a parse tree produced by the <c>idAtom</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.EnterJsonCreationExp(ExpressionAntlrParser.JsonCreationExpContext)">
            <summary>
            Enter a parse tree produced by the <c>jsonCreationExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.ExitJsonCreationExp(ExpressionAntlrParser.JsonCreationExpContext)">
            <summary>
            Exit a parse tree produced by the <c>jsonCreationExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.EnterStringAtom(ExpressionAntlrParser.StringAtomContext)">
            <summary>
            Enter a parse tree produced by the <c>stringAtom</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.ExitStringAtom(ExpressionAntlrParser.StringAtomContext)">
            <summary>
            Exit a parse tree produced by the <c>stringAtom</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.EnterIndexAccessExp(ExpressionAntlrParser.IndexAccessExpContext)">
            <summary>
            Enter a parse tree produced by the <c>indexAccessExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.ExitIndexAccessExp(ExpressionAntlrParser.IndexAccessExpContext)">
            <summary>
            Exit a parse tree produced by the <c>indexAccessExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.EnterStringInterpolationAtom(ExpressionAntlrParser.StringInterpolationAtomContext)">
            <summary>
            Enter a parse tree produced by the <c>stringInterpolationAtom</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.ExitStringInterpolationAtom(ExpressionAntlrParser.StringInterpolationAtomContext)">
            <summary>
            Exit a parse tree produced by the <c>stringInterpolationAtom</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.EnterMemberAccessExp(ExpressionAntlrParser.MemberAccessExpContext)">
            <summary>
            Enter a parse tree produced by the <c>memberAccessExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.ExitMemberAccessExp(ExpressionAntlrParser.MemberAccessExpContext)">
            <summary>
            Exit a parse tree produced by the <c>memberAccessExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.EnterParenthesisExp(ExpressionAntlrParser.ParenthesisExpContext)">
            <summary>
            Enter a parse tree produced by the <c>parenthesisExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.ExitParenthesisExp(ExpressionAntlrParser.ParenthesisExpContext)">
            <summary>
            Exit a parse tree produced by the <c>parenthesisExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.EnterNumericAtom(ExpressionAntlrParser.NumericAtomContext)">
            <summary>
            Enter a parse tree produced by the <c>numericAtom</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.ExitNumericAtom(ExpressionAntlrParser.NumericAtomContext)">
            <summary>
            Exit a parse tree produced by the <c>numericAtom</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.EnterArrayCreationExp(ExpressionAntlrParser.ArrayCreationExpContext)">
            <summary>
            Enter a parse tree produced by the <c>arrayCreationExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.ExitArrayCreationExp(ExpressionAntlrParser.ArrayCreationExpContext)">
            <summary>
            Exit a parse tree produced by the <c>arrayCreationExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.EnterStringInterpolation(ExpressionAntlrParser.StringInterpolationContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:ExpressionAntlrParser.stringInterpolation"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.ExitStringInterpolation(ExpressionAntlrParser.StringInterpolationContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:ExpressionAntlrParser.stringInterpolation"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.EnterTextContent(ExpressionAntlrParser.TextContentContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:ExpressionAntlrParser.textContent"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.ExitTextContent(ExpressionAntlrParser.TextContentContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:ExpressionAntlrParser.textContent"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.EnterArgsList(ExpressionAntlrParser.ArgsListContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:ExpressionAntlrParser.argsList"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.ExitArgsList(ExpressionAntlrParser.ArgsListContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:ExpressionAntlrParser.argsList"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.EnterLambda(ExpressionAntlrParser.LambdaContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:ExpressionAntlrParser.lambda"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.ExitLambda(ExpressionAntlrParser.LambdaContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:ExpressionAntlrParser.lambda"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.EnterKeyValuePairList(ExpressionAntlrParser.KeyValuePairListContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:ExpressionAntlrParser.keyValuePairList"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.ExitKeyValuePairList(ExpressionAntlrParser.KeyValuePairListContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:ExpressionAntlrParser.keyValuePairList"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.EnterKeyValuePair(ExpressionAntlrParser.KeyValuePairContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:ExpressionAntlrParser.keyValuePair"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.ExitKeyValuePair(ExpressionAntlrParser.KeyValuePairContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:ExpressionAntlrParser.keyValuePair"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.EnterKey(ExpressionAntlrParser.KeyContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:ExpressionAntlrParser.key"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IExpressionAntlrParserListener.ExitKey(ExpressionAntlrParser.KeyContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:ExpressionAntlrParser.key"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="T:IExpressionAntlrParserVisitor`1">
            <summary>
            This interface defines a complete generic visitor for a parse tree produced
            by <see cref="T:ExpressionAntlrParser"/>.
            </summary>
            <typeparam name="Result">The return type of the visit operation.</typeparam>
        </member>
        <member name="M:IExpressionAntlrParserVisitor`1.VisitFile(ExpressionAntlrParser.FileContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:ExpressionAntlrParser.file"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:IExpressionAntlrParserVisitor`1.VisitUnaryOpExp(ExpressionAntlrParser.UnaryOpExpContext)">
            <summary>
            Visit a parse tree produced by the <c>unaryOpExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:IExpressionAntlrParserVisitor`1.VisitBinaryOpExp(ExpressionAntlrParser.BinaryOpExpContext)">
            <summary>
            Visit a parse tree produced by the <c>binaryOpExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:IExpressionAntlrParserVisitor`1.VisitPrimaryExp(ExpressionAntlrParser.PrimaryExpContext)">
            <summary>
            Visit a parse tree produced by the <c>primaryExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:IExpressionAntlrParserVisitor`1.VisitTripleOpExp(ExpressionAntlrParser.TripleOpExpContext)">
            <summary>
            Visit a parse tree produced by the <c>tripleOpExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:IExpressionAntlrParserVisitor`1.VisitFuncInvokeExp(ExpressionAntlrParser.FuncInvokeExpContext)">
            <summary>
            Visit a parse tree produced by the <c>funcInvokeExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:IExpressionAntlrParserVisitor`1.VisitIdAtom(ExpressionAntlrParser.IdAtomContext)">
            <summary>
            Visit a parse tree produced by the <c>idAtom</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:IExpressionAntlrParserVisitor`1.VisitJsonCreationExp(ExpressionAntlrParser.JsonCreationExpContext)">
            <summary>
            Visit a parse tree produced by the <c>jsonCreationExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:IExpressionAntlrParserVisitor`1.VisitStringAtom(ExpressionAntlrParser.StringAtomContext)">
            <summary>
            Visit a parse tree produced by the <c>stringAtom</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:IExpressionAntlrParserVisitor`1.VisitIndexAccessExp(ExpressionAntlrParser.IndexAccessExpContext)">
            <summary>
            Visit a parse tree produced by the <c>indexAccessExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:IExpressionAntlrParserVisitor`1.VisitStringInterpolationAtom(ExpressionAntlrParser.StringInterpolationAtomContext)">
            <summary>
            Visit a parse tree produced by the <c>stringInterpolationAtom</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:IExpressionAntlrParserVisitor`1.VisitMemberAccessExp(ExpressionAntlrParser.MemberAccessExpContext)">
            <summary>
            Visit a parse tree produced by the <c>memberAccessExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:IExpressionAntlrParserVisitor`1.VisitParenthesisExp(ExpressionAntlrParser.ParenthesisExpContext)">
            <summary>
            Visit a parse tree produced by the <c>parenthesisExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:IExpressionAntlrParserVisitor`1.VisitNumericAtom(ExpressionAntlrParser.NumericAtomContext)">
            <summary>
            Visit a parse tree produced by the <c>numericAtom</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:IExpressionAntlrParserVisitor`1.VisitArrayCreationExp(ExpressionAntlrParser.ArrayCreationExpContext)">
            <summary>
            Visit a parse tree produced by the <c>arrayCreationExp</c>
            labeled alternative in <see cref="M:ExpressionAntlrParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:IExpressionAntlrParserVisitor`1.VisitStringInterpolation(ExpressionAntlrParser.StringInterpolationContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:ExpressionAntlrParser.stringInterpolation"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:IExpressionAntlrParserVisitor`1.VisitTextContent(ExpressionAntlrParser.TextContentContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:ExpressionAntlrParser.textContent"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:IExpressionAntlrParserVisitor`1.VisitArgsList(ExpressionAntlrParser.ArgsListContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:ExpressionAntlrParser.argsList"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:IExpressionAntlrParserVisitor`1.VisitLambda(ExpressionAntlrParser.LambdaContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:ExpressionAntlrParser.lambda"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:IExpressionAntlrParserVisitor`1.VisitKeyValuePairList(ExpressionAntlrParser.KeyValuePairListContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:ExpressionAntlrParser.keyValuePairList"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:IExpressionAntlrParserVisitor`1.VisitKeyValuePair(ExpressionAntlrParser.KeyValuePairContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:ExpressionAntlrParser.keyValuePair"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:IExpressionAntlrParserVisitor`1.VisitKey(ExpressionAntlrParser.KeyContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:ExpressionAntlrParser.key"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
    </members>
</doc>
